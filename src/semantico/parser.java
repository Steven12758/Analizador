
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed Aug 24 03:29:57 ECT 2022
//----------------------------------------------------

package semantico;

import java.util.LinkedList;
import java_cup.runtime.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Wed Aug 24 03:29:57 ECT 2022
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\056\000\002\002\004\000\002\002\003\000\002\003" +
    "\004\000\002\003\003\000\002\004\013\000\002\004\003" +
    "\000\002\016\005\000\002\016\003\000\002\016\003\000" +
    "\002\016\003\000\002\017\003\000\002\017\003\000\002" +
    "\023\004\000\002\023\003\000\002\023\004\000\002\023" +
    "\003\000\002\023\004\000\002\023\003\000\002\023\004" +
    "\000\002\023\003\000\002\023\005\000\002\023\004\000" +
    "\002\023\003\000\002\023\003\000\002\023\003\000\002" +
    "\005\005\000\002\005\007\000\002\005\007\000\002\005" +
    "\007\000\002\005\007\000\002\005\006\000\002\005\006" +
    "\000\002\005\006\000\002\005\006\000\002\005\005\000" +
    "\002\005\007\000\002\005\007\000\002\014\005\000\002" +
    "\014\007\000\002\014\005\000\002\007\011\000\002\010" +
    "\015\000\002\011\011\000\002\013\011\000\002\015\012" +
    "\000\002\006\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\155\000\006\003\005\013\010\001\002\000\010\002" +
    "\ufffe\003\ufffe\013\ufffe\001\002\000\010\002\ufffc\003\ufffc" +
    "\013\ufffc\001\002\000\010\002\000\003\005\013\010\001" +
    "\002\000\004\002\156\001\002\000\004\012\011\001\002" +
    "\000\004\011\012\001\002\000\004\046\013\001\002\000" +
    "\004\024\014\001\002\000\004\047\ufff7\001\002\000\004" +
    "\047\017\001\002\000\004\047\ufff6\001\002\000\004\042" +
    "\020\001\002\000\020\004\035\021\036\025\033\026\030" +
    "\027\026\032\024\033\034\001\002\000\016\021\uffea\026" +
    "\uffea\027\uffea\032\uffea\033\uffea\043\uffea\001\002\000\016" +
    "\021\uffee\026\uffee\027\uffee\032\uffee\033\uffee\043\uffee\001" +
    "\002\000\016\021\036\026\030\027\026\032\024\033\034" +
    "\043\155\001\002\000\004\046\147\001\002\000\016\021" +
    "\uffeb\026\uffeb\027\uffeb\032\uffeb\033\uffeb\043\uffeb\001\002" +
    "\000\004\046\135\001\002\000\016\021\ufff4\026\ufff4\027" +
    "\ufff4\032\ufff4\033\ufff4\043\ufff4\001\002\000\004\004\125" +
    "\001\002\000\016\021\ufff0\026\ufff0\027\ufff0\032\ufff0\033" +
    "\ufff0\043\ufff0\001\002\000\016\021\ufff2\026\ufff2\027\ufff2" +
    "\032\ufff2\033\ufff2\043\ufff2\001\002\000\004\004\120\001" +
    "\002\000\004\046\071\001\002\000\006\035\066\037\067" +
    "\001\002\000\010\004\042\037\041\040\040\001\002\000" +
    "\016\021\uffe9\026\uffe9\027\uffe9\032\uffe9\033\uffe9\043\uffe9" +
    "\001\002\000\004\004\064\001\002\000\004\004\062\001" +
    "\002\000\014\010\044\020\047\036\046\037\045\040\043" +
    "\001\002\000\004\010\061\001\002\000\016\021\uffe8\026" +
    "\uffe8\027\uffe8\032\uffe8\033\uffe8\043\uffe8\001\002\000\004" +
    "\010\060\001\002\000\006\022\055\023\054\001\002\000" +
    "\006\022\051\023\050\001\002\000\004\010\053\001\002" +
    "\000\004\010\052\001\002\000\016\021\uffe7\026\uffe7\027" +
    "\uffe7\032\uffe7\033\uffe7\043\uffe7\001\002\000\016\021\uffe6" +
    "\026\uffe6\027\uffe6\032\uffe6\033\uffe6\043\uffe6\001\002\000" +
    "\004\010\057\001\002\000\004\010\056\001\002\000\016" +
    "\021\uffe5\026\uffe5\027\uffe5\032\uffe5\033\uffe5\043\uffe5\001" +
    "\002\000\016\021\uffe4\026\uffe4\027\uffe4\032\uffe4\033\uffe4" +
    "\043\uffe4\001\002\000\016\021\uffe3\026\uffe3\027\uffe3\032" +
    "\uffe3\033\uffe3\043\uffe3\001\002\000\016\021\uffe2\026\uffe2" +
    "\027\uffe2\032\uffe2\033\uffe2\043\uffe2\001\002\000\004\010" +
    "\063\001\002\000\016\021\uffe1\026\uffe1\027\uffe1\032\uffe1" +
    "\033\uffe1\043\uffe1\001\002\000\004\010\065\001\002\000" +
    "\016\021\uffe0\026\uffe0\027\uffe0\032\uffe0\033\uffe0\043\uffe0" +
    "\001\002\000\004\022\070\001\002\000\020\021\uffd4\026" +
    "\uffd4\027\uffd4\032\uffd4\033\uffd4\043\uffd4\047\uffd4\001\002" +
    "\000\022\010\uffda\021\uffda\026\uffda\027\uffda\032\uffda\033" +
    "\uffda\043\uffda\047\uffda\001\002\000\004\021\073\001\002" +
    "\000\004\047\105\001\002\000\004\004\074\001\002\000" +
    "\004\020\075\001\002\000\004\022\076\001\002\000\004" +
    "\010\077\001\002\000\006\004\101\025\033\001\002\000" +
    "\004\010\102\001\002\000\004\035\066\001\002\000\004" +
    "\004\104\001\002\000\004\047\uffd5\001\002\000\004\037" +
    "\067\001\002\000\004\042\106\001\002\000\020\004\035" +
    "\021\036\025\033\026\030\027\026\032\024\033\034\001" +
    "\002\000\016\021\036\026\030\027\026\032\024\033\034" +
    "\043\115\001\002\000\016\021\uffef\026\uffef\027\uffef\032" +
    "\uffef\033\uffef\043\uffef\001\002\000\016\021\uffec\026\uffec" +
    "\027\uffec\032\uffec\033\uffec\043\uffec\001\002\000\016\021" +
    "\ufff5\026\ufff5\027\ufff5\032\ufff5\033\ufff5\043\ufff5\001\002" +
    "\000\016\021\ufff1\026\ufff1\027\ufff1\032\ufff1\033\ufff1\043" +
    "\ufff1\001\002\000\016\021\ufff3\026\ufff3\027\ufff3\032\ufff3" +
    "\033\ufff3\043\ufff3\001\002\000\016\021\uffd6\026\uffd6\027" +
    "\uffd6\032\uffd6\033\uffd6\043\uffd6\001\002\000\002\001\002" +
    "\000\016\021\uffed\026\uffed\027\uffed\032\uffed\033\uffed\043" +
    "\uffed\001\002\000\006\010\121\020\122\001\002\000\022" +
    "\010\uffdc\021\uffdc\026\uffdc\027\uffdc\032\uffdc\033\uffdc\043" +
    "\uffdc\047\uffdc\001\002\000\004\041\123\001\002\000\004" +
    "\010\124\001\002\000\022\010\uffdb\021\uffdb\026\uffdb\027" +
    "\uffdb\032\uffdb\033\uffdb\043\uffdb\047\uffdb\001\002\000\010" +
    "\010\126\020\130\036\127\001\002\000\016\021\uffdf\026" +
    "\uffdf\027\uffdf\032\uffdf\033\uffdf\043\uffdf\001\002\000\004" +
    "\024\133\001\002\000\004\024\131\001\002\000\004\010" +
    "\132\001\002\000\016\021\uffde\026\uffde\027\uffde\032\uffde" +
    "\033\uffde\043\uffde\001\002\000\004\010\134\001\002\000" +
    "\016\021\uffdd\026\uffdd\027\uffdd\032\uffdd\033\uffdd\043\uffdd" +
    "\001\002\000\006\004\101\025\033\001\002\000\004\047" +
    "\137\001\002\000\004\042\140\001\002\000\020\004\035" +
    "\021\036\025\033\026\030\027\026\032\024\033\034\001" +
    "\002\000\016\021\036\026\030\027\026\032\024\033\034" +
    "\043\142\001\002\000\020\021\uffd9\026\uffd9\027\uffd9\030" +
    "\143\032\uffd9\033\uffd9\043\uffd9\001\002\000\004\042\144" +
    "\001\002\000\020\004\035\021\036\025\033\026\030\027" +
    "\026\032\024\033\034\001\002\000\016\021\036\026\030" +
    "\027\026\032\024\033\034\043\146\001\002\000\016\021" +
    "\uffd8\026\uffd8\027\uffd8\032\uffd8\033\uffd8\043\uffd8\001\002" +
    "\000\006\004\101\025\033\001\002\000\004\047\151\001" +
    "\002\000\004\042\152\001\002\000\020\004\035\021\036" +
    "\025\033\026\030\027\026\032\024\033\034\001\002\000" +
    "\016\021\036\026\030\027\026\032\024\033\034\043\154" +
    "\001\002\000\016\021\uffd7\026\uffd7\027\uffd7\032\uffd7\033" +
    "\uffd7\043\uffd7\001\002\000\010\002\ufffd\003\ufffd\013\ufffd" +
    "\001\002\000\004\002\001\001\002\000\010\002\uffff\003" +
    "\uffff\013\uffff\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\155\000\010\002\006\003\005\004\003\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\004\156\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\017\014\021\015\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\005\026\006\020\007\031\010\030\011\021" +
    "\013\024\014\036\023\022\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\005\111\007\113\010\112\011\107" +
    "\012\115\013\110\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\015\071\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\014\077\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\006\102\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\005\026\006\020\007\031\010" +
    "\030\011\021\013\024\014\036\023\106\001\001\000\016" +
    "\005\111\007\113\010\112\011\107\012\115\013\110\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\012\116\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\014\135" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\005" +
    "\026\006\020\007\031\010\030\011\021\013\024\014\036" +
    "\023\140\001\001\000\016\005\111\007\113\010\112\011" +
    "\107\012\115\013\110\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\005\026\006\020\007\031\010\030\011" +
    "\021\013\024\014\036\023\144\001\001\000\016\005\111" +
    "\007\113\010\112\011\107\012\115\013\110\001\001\000" +
    "\002\001\001\000\004\014\147\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\005\026\006\020\007\031\010" +
    "\030\011\021\013\024\014\036\023\152\001\001\000\016" +
    "\005\111\007\113\010\112\011\107\012\115\013\110\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    /*Arbol*/
    public static Nodo padre;
    public int contador=0;

    /*Listas*/
    public static LinkedList<String> PalabraReservada = new LinkedList<>();
    public static LinkedList<String> Simbolo = new LinkedList<>();
    public static LinkedList<String> Cadenas = new LinkedList<>();
    public static LinkedList<String> Variables = new LinkedList<>();
    public static LinkedList<String> ValoresNumericos = new LinkedList<>();
    public static LinkedList<String> Errores = new LinkedList<>();
    
    /**
     * Método al que se llama automáticamente ante algún error sintactico.
     **/ 
    public void syntax_error(Symbol s){ 
            System.err.println("Error Sintáctico en la Línea " + (s.left) +" Columna "+s.right+ ". No se esperaba este componente: " +s.value+".");
            parser.Errores.add("Error Sintáctico en la Línea " + (s.left) +" Columna "+s.right+ ". No se esperaba este componente: " +s.value+". \n");
    } 

    /**
     * Método al que se llama en el momento en que ya no es posible una recuperación de errores.
     **/ 
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
            System.err.println("Error síntactico irrecuperable en la Línea " + (s.left)+ " Columna "+s.right+". Componente " + s.value + " no reconocido."); 
            parser.Errores.add("Error Sintáctico en la Línea " + (s.left) +" Columna "+s.right+ ". No se esperaba este componente: " +s.value+". \n");
    }  

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // DECLARACION_FOR ::= Identificador Op_Incremento 
            {
              Object RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int op1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String op1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        parser.Variables.add(id1); 
        parser.Simbolo.add(op1);

        Nodo tmp = new Nodo("CICLO");
        tmp.setIdNod(parser.contador++);
        tmp.setValor(id1);
        RESULT=tmp;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // SENTENCIA_FOR ::= T_Dato Identificador Igual entero P_coma SENTENCIA_BOOLEANA P_coma DECLARACION_FOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // FOR ::= For Parentesis_a SENTENCIA_FOR Parentesis_c Llave_a INSTRUCCION Llave_c 
            {
              Object RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int logicaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int logicaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object logica = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int nd1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nd1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object nd1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
 	parser.PalabraReservada.add(var); 
        parser.Simbolo.add(" ( "); 
        parser.Simbolo.add(" ) "); 
        parser.Simbolo.add(" ; "); 
        parser.Simbolo.add(" { "); 
        parser.Simbolo.add(" } ");

        Nodo nd = new Nodo("CICLO");
        nd.setValor(" for ");

        Nodo para = new Nodo("Simbolo");
        para.setValor(" ( ");
        para.setIdNod(parser.contador++);

        Nodo parc = new Nodo("Simbolo");
        parc.setValor(" ) ");
        parc.setIdNod(parser.contador++);

        Nodo lla = new Nodo("Simbolo");
        lla.setValor(" { ");
        lla.setIdNod(parser.contador++);

        Nodo llc = new Nodo("Simbolo");
        llc.setValor(" } ");
        llc.setIdNod(parser.contador++);

        nd.AddHijos((Nodo) para);
        nd.AddHijos((Nodo) logica);
        nd.AddHijos((Nodo) parc);
        nd.AddHijos((Nodo) lla);
        nd.AddHijos((Nodo) nd1);
        nd.AddHijos((Nodo) llc);

        nd.setIdNod(parser.contador++);
        RESULT = nd;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FOR",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // WHILE ::= While Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Llave_a INSTRUCCION Llave_c 
            {
              Object RESULT =null;
		int mientrasleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int mientrasright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String mientras = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int logicaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int logicaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object logica = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int nd1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nd1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object nd1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
 	parser.PalabraReservada.add(mientras); 
        parser.Simbolo.add(" ( "); 
        parser.Simbolo.add(" ) "); 
        parser.Simbolo.add(" ; "); 
        parser.Simbolo.add(" { "); 
        parser.Simbolo.add(" } ");

        Nodo nd = new Nodo("CICLO");
        nd.setValor(" while ");

        Nodo para = new Nodo("Simbolo");
        para.setValor(" ( ");
        para.setIdNod(parser.contador++);

        Nodo parc = new Nodo("Simbolo");
        parc.setValor(" ) ");
        parc.setIdNod(parser.contador++);

        Nodo lla = new Nodo("Simbolo");
        lla.setValor(" { ");
        lla.setIdNod(parser.contador++);

        Nodo llc = new Nodo("Simbolo");
        llc.setValor(" } ");
        llc.setIdNod(parser.contador++);

        nd.AddHijos((Nodo) para);
        nd.AddHijos((Nodo) logica);
        nd.AddHijos((Nodo) parc);
        nd.AddHijos((Nodo) lla);
        nd.AddHijos((Nodo) nd1);
        nd.AddHijos((Nodo) llc);

        nd.setIdNod(parser.contador++);
        RESULT = nd;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("WHILE",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // IF_ELSE ::= If Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Llave_a INSTRUCCION Llave_c Else Llave_a INSTRUCCION Llave_c 
            {
              Object RESULT =null;
		int simleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int simright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		String sim = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int logicaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int logicaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Object logica = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int nd1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int nd1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object nd1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int nd2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nd2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object nd2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        parser.PalabraReservada.add(sim); 
        parser.Simbolo.add(" ( "); 
        parser.Simbolo.add(" ) "); 
        parser.Simbolo.add(" { "); 
        parser.Simbolo.add(" } ");

        Nodo nd = new Nodo("CONDICIONAL_SI_NO");
        nd.setValor(" if ");

        Nodo para = new Nodo("Simbolo");
        para.setValor(" ( ");
        para.setIdNod(parser.contador++);

        Nodo parc = new Nodo("Simbolo");
        parc.setValor(" ) ");
        parc.setIdNod(parser.contador++);

        Nodo lla = new Nodo("Simbolo");
        lla.setValor(" { ");
        lla.setIdNod(parser.contador++);

        Nodo llc = new Nodo("Simbolo");
        llc.setValor(" } ");
        llc.setIdNod(parser.contador++);

        nd.AddHijos((Nodo) para);
        nd.AddHijos((Nodo) logica);
        nd.AddHijos((Nodo) parc);
        nd.AddHijos((Nodo) lla);
        nd.AddHijos((Nodo) nd1);
        nd.AddHijos((Nodo) llc);

        Nodo ndE = new Nodo("ELSE");
        ndE.setValor(" else ");
        nd.AddHijos((Nodo) ndE);

        Nodo lla2 = new Nodo("Simbolo");
        lla2.setValor(" { ");
        lla2.setIdNod(parser.contador++);

        Nodo llc2 = new Nodo("Simbolo");
        llc2.setValor(" } ");
        llc2.setIdNod(parser.contador++);

        ndE.AddHijos((Nodo) lla2);
        ndE.AddHijos((Nodo) nd2);
        ndE.AddHijos((Nodo) llc2);

        ndE.setIdNod(parser.contador++);
        nd.setIdNod(parser.contador++);
        RESULT = nd;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IF_ELSE",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // IF ::= If Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Llave_a INSTRUCCION Llave_c 
            {
              Object RESULT =null;
		int simleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int simright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String sim = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int logicaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int logicaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object logica = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int nd1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nd1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object nd1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        parser.PalabraReservada.add(sim); 
        parser.Simbolo.add(" ( "); 
        parser.Simbolo.add(" ) "); 
        parser.Simbolo.add(" { "); 
        parser.Simbolo.add(" } ");

        Nodo nd = new Nodo("CONDICIONAL");
        nd.setValor(" if ");

        Nodo conIf = new Nodo("Simbolo");
        conIf.setValor(" ( ");
        conIf.setIdNod(parser.contador++);

        Nodo parc = new Nodo("Simbolo");
        parc.setValor(" ) ");
        parc.setIdNod(parser.contador++);

        Nodo lla = new Nodo("Simbolo");
        lla.setValor(" { ");
        lla.setIdNod(parser.contador++);

        Nodo llc = new Nodo("Simbolo");
        llc.setValor(" } ");
        llc.setIdNod(parser.contador++);

        nd.AddHijos((Nodo) conIf);
        nd.AddHijos((Nodo) logica);
        nd.AddHijos((Nodo) parc);
        nd.AddHijos((Nodo) lla);
        nd.AddHijos((Nodo) nd1);
        nd.AddHijos((Nodo) llc);

        nd.setIdNod(parser.contador++);
        RESULT = nd;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IF",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // SENTENCIA_BOOLEANA ::= Identificador Op_Relacional entero 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // SENTENCIA_BOOLEANA ::= Bool Identificador Igual Op_Booleano P_coma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // SENTENCIA_BOOLEANA ::= Bool Identificador P_coma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // DECLARACION ::= Cadena Identificador Op_Atribucion cadena P_coma 
            {
              Object RESULT =null;
		int txt3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int txt3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String txt3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int idc3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idc3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String idc3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int opaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int oparight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String opa = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int nd2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nd2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String nd2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        parser.Cadenas.add(txt3);
        parser.Variables.add(idc3); 
        parser.Simbolo.add(opa);
        parser.Cadenas.add(nd2);
        parser.Simbolo.add(" ; ");

        Nodo tmp = new Nodo("TEXTO");
        tmp.setIdNod(parser.contador++);
        tmp.setValor(txt3);
        RESULT=tmp;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // DECLARACION ::= Cadena Identificador Igual cadena P_coma 
            {
              Object RESULT =null;
		int txt2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int txt2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String txt2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int idc2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idc2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String idc2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int nd1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nd1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String nd1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        parser.Cadenas.add(txt2);
        parser.Variables.add(idc2); 
        parser.Simbolo.add(" = ");
        parser.Cadenas.add(nd1);
        parser.Simbolo.add(" ; ");

        Nodo tmp = new Nodo("TEXTO");
        tmp.setIdNod(parser.contador++);
        tmp.setValor(txt2);
        RESULT=tmp;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // DECLARACION ::= Cadena Identificador P_coma 
            {
              Object RESULT =null;
		int txt1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int txt1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String txt1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idc1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idc1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String idc1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        parser.Cadenas.add(txt1);
        parser.Variables.add(idc1); 
        parser.Simbolo.add(" ; ");
        
        Nodo tmp = new Nodo("TEXTO");
        tmp.setIdNod(parser.contador++);
        tmp.setValor(txt1);
        RESULT=tmp;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // DECLARACION ::= T_Dato Op_Disminucion Identificador P_coma 
            {
              Object RESULT =null;
		int d9left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int d9right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String d9 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int op4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int op4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String op4 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int id9left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int id9right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id9 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        parser.ValoresNumericos.add(d9);
        parser.Simbolo.add(op4); 
        parser.Variables.add(id9);
        parser.Simbolo.add(" ; ");

        Nodo tmp = new Nodo("NUMERICO");
        tmp.setIdNod(parser.contador++);
        tmp.setValor(d9);
        RESULT=tmp;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // DECLARACION ::= T_Dato Op_Incremento Identificador P_coma 
            {
              Object RESULT =null;
		int d8left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int d8right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String d8 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int op3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int op3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String op3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int id8left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int id8right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id8 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        parser.ValoresNumericos.add(d8);
        parser.Simbolo.add(op3); 
        parser.Variables.add(id8);
        parser.Simbolo.add(" ; ");

        Nodo tmp = new Nodo("NUMERICO");
        tmp.setIdNod(parser.contador++);
        tmp.setValor(d8);
        RESULT=tmp;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // DECLARACION ::= T_Dato Identificador Op_Disminucion P_coma 
            {
              Object RESULT =null;
		int d7left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int d7right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String d7 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int id7left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int id7right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id7 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String op2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        parser.ValoresNumericos.add(d7);
        parser.Variables.add(id7);
        parser.Simbolo.add(op2); 
        parser.Simbolo.add(" ; ");

        Nodo tmp = new Nodo("NUMERICO");
        tmp.setIdNod(parser.contador++);
        tmp.setValor(d7);
        RESULT=tmp;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // DECLARACION ::= T_Dato Identificador Op_Incremento P_coma 
            {
              Object RESULT =null;
		int d6left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int d6right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String d6 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int id6left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int id6right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id6 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int op1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String op1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        parser.ValoresNumericos.add(d6);
        parser.Variables.add(id6);
        parser.Simbolo.add(op1); 
        parser.Simbolo.add(" ; ");

        Nodo tmp = new Nodo("NUMERICO");
        tmp.setIdNod(parser.contador++);
        tmp.setValor(d6);
        RESULT=tmp;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // DECLARACION ::= T_Dato Identificador Op_Atribucion decimal P_coma 
            {
              Object RESULT =null;
		int d5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int d5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String d5 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int id5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int id5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id5 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int sig2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sig2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String sig2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dec2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dec2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String dec2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		  
        parser.ValoresNumericos.add(d5);
        parser.ValoresNumericos.add(dec2);
        parser.Variables.add(id5);
        parser.Simbolo.add(sig2); 
        parser.Simbolo.add(" ; ");

        Nodo tmp = new Nodo("NUMERICO");
        tmp.setIdNod(parser.contador++);
        tmp.setValor(d5);
        RESULT=tmp;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // DECLARACION ::= T_Dato Identificador Op_Atribucion entero P_coma 
            {
              Object RESULT =null;
		int d4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int d4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String d4 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int id4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int id4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id4 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int sig1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sig1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String sig1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int num2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int num2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String num2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        parser.ValoresNumericos.add(d4);
        parser.ValoresNumericos.add(num2);
        parser.Variables.add(id4);
        parser.Simbolo.add(sig1); 
        parser.Simbolo.add(" ; ");

        Nodo tmp = new Nodo("NUMERICO");
        tmp.setIdNod(parser.contador++);
        tmp.setValor(d4);
        RESULT=tmp;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // DECLARACION ::= T_Dato Identificador Igual decimal P_coma 
            {
              Object RESULT =null;
		int d3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int d3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String d3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int id3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int id3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int dec1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dec1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String dec1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        parser.ValoresNumericos.add(d3);
        parser.ValoresNumericos.add(dec1);
        parser.Variables.add(id3);
        parser.Simbolo.add(" = "); 
        parser.Simbolo.add(" ; "); 
        
        Nodo tmp = new Nodo("NUMERICO");
        tmp.setIdNod(parser.contador++);
        tmp.setValor(d3);
        RESULT=tmp;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // DECLARACION ::= T_Dato Identificador Igual entero P_coma 
            {
              Object RESULT =null;
		int d2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int d2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String d2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int num1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int num1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String num1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        parser.ValoresNumericos.add(d2);
        parser.ValoresNumericos.add(num1);
        parser.Variables.add(id2);
        parser.Simbolo.add(" = "); 
        parser.Simbolo.add(" ; "); 

        Nodo tmp = new Nodo("NUMERICO");
        tmp.setIdNod(parser.contador++);
        tmp.setValor(d2);
        RESULT=tmp;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // DECLARACION ::= T_Dato Identificador P_coma 
            {
              Object RESULT =null;
		int d1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int d1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String d1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        parser.ValoresNumericos.add(d1);
        parser.Variables.add(id1);
        parser.Simbolo.add(" ; "); 

        Nodo tmp = new Nodo("NUMERICO");
        tmp.setIdNod(parser.contador++);
        tmp.setValor(d1);
        RESULT=tmp;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // INSTRUCCION ::= SENTENCIA_BOOLEANA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // INSTRUCCION ::= DECLARACION_FOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // INSTRUCCION ::= FOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // INSTRUCCION ::= INSTRUCCION FOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // INSTRUCCION ::= INSTRUCCION DO_WHILE DO_WHILE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // INSTRUCCION ::= WHILE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // INSTRUCCION ::= INSTRUCCION WHILE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // INSTRUCCION ::= IF_ELSE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // INSTRUCCION ::= INSTRUCCION IF_ELSE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // INSTRUCCION ::= IF 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // INSTRUCCION ::= INSTRUCCION IF 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // INSTRUCCION ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // INSTRUCCION ::= INSTRUCCION DECLARACION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // EXPRE_CADENA ::= EXPRE_LOGICA 
            {
              Object RESULT =null;
		int logicaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int logicaright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object logica = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        Nodo tmp = new Nodo("BOOLEAN");
        tmp.setIdNod(parser.contador++);
        tmp.AddHijos((Nodo) logica);
        RESULT=tmp;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRE_CADENA",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // EXPRE_CADENA ::= cadena 
            {
              Object RESULT =null;
		int textoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int textoright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String texto = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        parser.Cadenas.add(texto);

        Nodo tmp = new Nodo("TEXTO");
        tmp.setIdNod(parser.contador++);
        tmp.setValor(texto);
        RESULT=tmp;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRE_CADENA",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // EXPRE_NUMERICA ::= Identificador 
            {
              Object RESULT =null;
		int identileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int identiright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String identi = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    parser.Variables.add(identi); 

    Nodo tmp = new Nodo("IDENTIFICADOR");
    tmp.setIdNod(parser.contador++);
    tmp.setValor(identi);
    RESULT=tmp;

  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRE_NUMERICA",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // EXPRE_NUMERICA ::= decimal 
            {
              Object RESULT =null;
		int numDecimalleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int numDecimalright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String numDecimal = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    parser.ValoresNumericos.add(numDecimal); 

    Nodo tmp = new Nodo("DECIMAL");
    tmp.setIdNod(parser.contador++);
    tmp.setValor(numDecimal);
    RESULT=tmp;

  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRE_NUMERICA",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // EXPRE_NUMERICA ::= entero 
            {
              Object RESULT =null;
		int numEnteroleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int numEnteroright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String numEntero = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    parser.ValoresNumericos.add(numEntero); 

    Nodo tmp = new Nodo("ENTERO");
    tmp.setIdNod(parser.contador++);
    tmp.setValor(numEntero);
    RESULT=tmp;

  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRE_NUMERICA",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // EXPRE_NUMERICA ::= Parentesis_a EXPRE_NUMERICA Parentesis_c 
            {
              Object RESULT =null;
		
  		parser.Simbolo.add(" ( "); parser.Simbolo.add(" ) ");

  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRE_NUMERICA",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // SENTENCIA ::= error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // SENTENCIA ::= Op_Acceso Void Main Parentesis_a EXPRE_CADENA Parentesis_c Llave_a INSTRUCCION Llave_c 
            {
              Object RESULT =null;
		int apublicleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int apublicright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String apublic = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int rvoidleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int rvoidright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String rvoid = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int mainleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int mainright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String main = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int nd1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int nd1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object nd1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int nd2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nd2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object nd2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        parser.PalabraReservada.add(apublic); 
        parser.PalabraReservada.add(rvoid); 
        parser.PalabraReservada.add(main); 
        parser.Simbolo.add(" ( "); 
        parser.Simbolo.add(" ) "); 
        parser.Simbolo.add(" { ");
        parser.Simbolo.add(" } ");

        Nodo nd = new Nodo("OPERADOR ACCESO");
        nd.setValor(" operador acceso ");
       
        Nodo nv = new Nodo("Palabra Reservada");
        nv.setValor(" void ");
        nv.setIdNod(parser.contador++);

        Nodo nm = new Nodo("Palabra Reservada");
        nm.setValor(" main ");
        nm.setIdNod(parser.contador++);

        Nodo para = new Nodo("Simbolo");
        para.setValor(" ( ");
        para.setIdNod(parser.contador++);

        Nodo parc = new Nodo("Simbolo");
        parc.setValor(" ) ");
        parc.setIdNod(parser.contador++);

        Nodo sim = new Nodo("Simbolo");
        sim.setValor(" { ");
        sim.setIdNod(parser.contador++);    

        Nodo sim2 = new Nodo("Simbolo");
        sim2.setValor(" } ");
        sim2.setIdNod(parser.contador++);

        nd.AddHijos((Nodo) para);
        nd.AddHijos((Nodo) nv);
        nd.AddHijos((Nodo) nm);
        nd.AddHijos((Nodo) nd1);
        nd.AddHijos((Nodo) parc);
        nd.AddHijos((Nodo) sim);
        nd.AddHijos((Nodo) sim2);

        nd.setIdNod(parser.contador++);
        RESULT=nd;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // SENTENCIAS ::= SENTENCIA 
            {
              Object RESULT =null;
		int s2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        Nodo tmp = new Nodo("SENTENCIA");
        tmp.setValor(" Sentencia ");
        tmp.setIdNod(parser.contador++);
        tmp.AddHijos((Nodo) s2);

        System.out.println("NODOS RAIZ tmp: " +tmp.Etiqueta);
        System.out.println("NODOS RAIZ s2: " + ((Nodo)s2).getHijos());

        RESULT=tmp;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // SENTENCIAS ::= SENTENCIAS SENTENCIA 
            {
              Object RESULT =null;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object s1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        Nodo tmp = new Nodo("SENTENCIAS");
        tmp.setValor(" Lista Sentencias ");
        tmp.setIdNod(parser.contador++);
        tmp.AddHijos((Nodo) s1);
        tmp.AddHijos((Nodo) s2);

        System.out.println("NODOS RAIZ tmp: "+tmp.Etiqueta);
        System.out.println("NODOS RAIZ s2: "+ ((Nodo)s2).getHijos());
        RESULT=tmp;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= SENTENCIAS 
            {
              Object RESULT =null;
		int instrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int instrright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object instr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        Nodo nd = new Nodo("INICIO");
        nd.setIdNod(parser.contador++);
        nd.AddHijos((Nodo) instr);
        parser.padre = (Nodo) nd;

        System.out.println("------------*************----------------");
        System.out.println("Compilacion exitosa!");
        System.out.println("------------*************----------------");

        RESULT = instr;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

