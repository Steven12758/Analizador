package semantico;

import java.awt.Color;
import java.awt.Desktop;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.io.StringReader;
import java.util.HashSet;
import java.util.logging.Level;
import java.util.logging.Logger;
import java_cup.runtime.Scanner;
import java_cup.runtime.Symbol;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author root
 */
public class GUI_Semantico extends javax.swing.JFrame {

    DefaultTableModel dataTable;

    String If = "";
    String While = "";
    int conta = 0;
    String[][] ts = new String[100][7];

    public GUI_Semantico() {
        initComponents();
    }

    public void initTable() {
        dataTable = new DefaultTableModel();
        dataTable.addColumn("Tokens - Lexema");
        dataTable.addColumn("Tipo");
        this.TableSimbolos1.setModel(dataTable);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtInput = new javax.swing.JTextArea();
        jLabel2 = new javax.swing.JLabel();
        BtnAnalziar = new javax.swing.JButton();
        BtnIf = new javax.swing.JButton();
        BtnWhile = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        TableSimbolos = new javax.swing.JTable();
        jLabel4 = new javax.swing.JLabel();
        BtnMostrarArbol = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        TxtErrorSint = new javax.swing.JTextArea();
        BtnLimpiar = new javax.swing.JButton();
        jScrollPane5 = new javax.swing.JScrollPane();
        TableSimbolos1 = new javax.swing.JTable();
        jLabel5 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel1.setText("Instrucciones");

        txtInput.setColumns(20);
        txtInput.setRows(5);
        txtInput.setText("apublic rvoid main(\"expresion\"){\n\"ejemplo\"\n}");
        jScrollPane1.setViewportView(txtInput);

        jLabel2.setFont(new java.awt.Font("Comic Sans MS", 0, 24)); // NOI18N
        jLabel2.setText("COMPILADOR");

        BtnAnalziar.setBackground(new java.awt.Color(0, 51, 255));
        BtnAnalziar.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        BtnAnalziar.setForeground(new java.awt.Color(255, 255, 255));
        BtnAnalziar.setText("Analizar");
        BtnAnalziar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnAnalziarActionPerformed(evt);
            }
        });

        BtnIf.setText("IF");
        BtnIf.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnIfActionPerformed(evt);
            }
        });

        BtnWhile.setText("WHILE");
        BtnWhile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnWhileActionPerformed(evt);
            }
        });

        TableSimbolos.setFont(new java.awt.Font("Comic Sans MS", 0, 11)); // NOI18N
        TableSimbolos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "TOKEN", "RESERVADA", "IDENTIFICADOR", "CADENA", "NUMERO", "SIMBOLO", "TIPO"
            }
        ));
        jScrollPane3.setViewportView(TableSimbolos);
        if (TableSimbolos.getColumnModel().getColumnCount() > 0) {
            TableSimbolos.getColumnModel().getColumn(0).setHeaderValue("TOKEN");
            TableSimbolos.getColumnModel().getColumn(1).setHeaderValue("RESERVADA");
            TableSimbolos.getColumnModel().getColumn(2).setResizable(false);
            TableSimbolos.getColumnModel().getColumn(2).setHeaderValue("IDENTIFICADOR");
            TableSimbolos.getColumnModel().getColumn(3).setHeaderValue("CADENA");
            TableSimbolos.getColumnModel().getColumn(5).setHeaderValue("SIMBOLO");
        }

        jLabel4.setFont(new java.awt.Font("Comic Sans MS", 3, 18)); // NOI18N
        jLabel4.setText("Tabla de Simbolos");

        BtnMostrarArbol.setBackground(new java.awt.Color(0, 51, 255));
        BtnMostrarArbol.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        BtnMostrarArbol.setForeground(new java.awt.Color(255, 255, 255));
        BtnMostrarArbol.setText("Mostrar √Årbol");
        BtnMostrarArbol.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnMostrarArbolActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel3.setText("Errores");

        TxtErrorSint.setColumns(20);
        TxtErrorSint.setRows(5);
        jScrollPane2.setViewportView(TxtErrorSint);

        BtnLimpiar.setBackground(new java.awt.Color(255, 0, 0));
        BtnLimpiar.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        BtnLimpiar.setForeground(new java.awt.Color(255, 255, 255));
        BtnLimpiar.setText("Limpiar");
        BtnLimpiar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnLimpiarActionPerformed(evt);
            }
        });

        TableSimbolos1.setFont(new java.awt.Font("Comic Sans MS", 0, 11)); // NOI18N
        TableSimbolos1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "LINEA", "SIMBOLO"
            }
        ));
        jScrollPane5.setViewportView(TableSimbolos1);

        jLabel5.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel5.setText("Analisis Lexico");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addGap(441, 441, 441)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(BtnAnalziar, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(33, 33, 33)
                                        .addComponent(BtnMostrarArbol))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(289, 289, 289)
                                        .addComponent(BtnLimpiar, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel1)
                                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 436, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(113, 113, 113)
                                        .addComponent(BtnIf)
                                        .addGap(55, 55, 55)
                                        .addComponent(BtnWhile)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel4)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 369, Short.MAX_VALUE))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addGap(0, 0, Short.MAX_VALUE)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel5)
                                            .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 521, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.LEADING))
                        .addGap(15, 15, 15))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addComponent(BtnAnalziar, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(BtnMostrarArbol, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(BtnLimpiar, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(13, 13, 13)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(BtnIf)
                        .addComponent(BtnWhile)))
                .addGap(24, 24, 24)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 187, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(19, 19, 19)
                .addComponent(jLabel3)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(22, 22, 22))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents


    private void BtnAnalziarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnAnalziarActionPerformed
        String ST = txtInput.getText();
        try {
            new parser((Scanner) new Lexer(new BufferedReader(new StringReader(ST)))).parse();
            analizarLexico();
            mostrarListas();
            TxtErrorSint.setText("Analisis realizado correctamente");
            TxtErrorSint.setForeground(new Color(25, 111, 61));
        } catch (Exception ex) {
            System.out.println("RESULTADO: NO SE HA PODIDO COMPILAR");
            System.out.println(parser.Errores);
            TxtErrorSint.setText("RESULTADO: NO SE HA PODIDO COMPILAR");
            TxtErrorSint.setText("" + parser.Errores);
            TxtErrorSint.setForeground(Color.red);
        }
    }//GEN-LAST:event_BtnAnalziarActionPerformed

    public void mostrarListas() {
        // TOKEN - PR - IDENTIFICADOR - CADENA - NUMERO - SIMBOLO - TIPO
        //PALABRAS RESERVADAS
        HashSet<String> hashSet = new HashSet<>(parser.PalabraReservada);
        parser.PalabraReservada.clear();
        parser.PalabraReservada.addAll(hashSet);
        for (String cadena : parser.PalabraReservada) {
            System.out.println(conta + " Palabra Reservada: " + cadena);
            ts[conta][0] = conta + ". " + cadena;
            ts[conta][1] = "x";
            ts[conta][2] = "";
            ts[conta][3] = "";
            ts[conta][4] = "";
            ts[conta][5] = "";
            ts[conta][6] = "";
            conta++;
        }
        //VALORES VARIABLES
        HashSet<String> hashSet5 = new HashSet<>(parser.Variables);
        parser.Variables.clear();
        parser.Variables.addAll(hashSet5);
        for (String cadena : parser.Variables) {
            System.out.println(conta + " Variables: " + cadena);
            ts[conta][0] = conta + ". " + cadena;
            ts[conta][2] = "x";
            ts[conta][6] = "";
            ts[conta][1] = "";
            ts[conta][3] = "";
            ts[conta][4] = "";
            ts[conta][5] = "";
            ts[conta][6] = "";
            conta++;
        }
        // TOKEN - PR - IDENTIFICADOR - CADENA - NUMERO - SIMBOLO - TIPO
        //CADENAS
        HashSet<String> hashSet3 = new HashSet<>(parser.Cadenas);
        parser.Cadenas.clear();
        parser.Cadenas.addAll(hashSet3);
        for (String cadena : parser.Cadenas) {
            System.out.println(conta + " Cadena: " + cadena);
            ts[conta][0] = conta + ". " + cadena;
            ts[conta][3] = "x";
            ts[conta][6] = "String";
            ts[conta][2] = "";
            ts[conta][1] = "";
            ts[conta][4] = "";
            ts[conta][5] = "";
            conta++;
        }
        //VALORES NUM√âRICOS
        HashSet<String> hashSet4 = new HashSet<>(parser.ValoresNumericos);
        parser.ValoresNumericos.clear();
        parser.ValoresNumericos.addAll(hashSet4);
        for (String cadena : parser.ValoresNumericos) {
            System.out.println(conta + " Valores num√©ricos: " + cadena);
            ts[conta][0] = conta + ". " + cadena;
            ts[conta][4] = "x";
            ts[conta][6] = "Numerico";
            ts[conta][2] = "";
            ts[conta][3] = "";
            ts[conta][1] = "";
            ts[conta][5] = "";
            conta++;
        }
        //SIMBOLOS
        HashSet<String> hashSet2 = new HashSet<>(parser.Simbolo);
        parser.Simbolo.clear();
        parser.Simbolo.addAll(hashSet2);
        for (String cadena : parser.Simbolo) {
            System.out.println(conta + " Simbolo: " + cadena);
            ts[conta][0] = conta + ". " + cadena;
            ts[conta][5] = "x";
            ts[conta][2] = "";
            ts[conta][3] = "";
            ts[conta][4] = "";
            ts[conta][1] = "";
            ts[conta][6] = "";
            conta++;
        }
        // TOKEN - PR - IDENTIFICADOR - CADENA - NUMERO - SIMBOLO - TIPO
        for (int i = 0; i < conta - 1; i++) {
            System.out.println("Token: " + ts[i][0] + " TR: " + ts[i][1] + " IDENT: " + ts[i][2] + " CADENA: " + ts[i][3] + " NUMERO: " + ts[i][4] + " SIMBOLO: " + ts[i][5] + " TIPO: " + ts[i][6]);
        }
        cargarTabla();
    }

    public void cargarTabla() {
        DefaultTableModel modelo = (DefaultTableModel) TableSimbolos.getModel();
        Object[] miTabla = new Object[7]; //Creo un Objeto de tres campos
        for (int i = 0; i < conta - 1; i++) {
            miTabla[0] = ts[i][0]; //token
            miTabla[1] = ts[i][1]; //palabra reservada
            miTabla[2] = ts[i][2]; //identificador
            miTabla[3] = ts[i][3]; //cadena
            miTabla[4] = ts[i][4]; //numero
            miTabla[5] = ts[i][5]; //simbolo
            miTabla[6] = ts[i][6]; //tipo
            modelo.addRow(miTabla); //Se agrega un nuevo registro a la tabla y se envia el objeto creado
            TableSimbolos.setModel(modelo); //se pasa el modelo a la tabla...   
        }
    }

    //RECORRER ARBOL
    public static String recorrido(Nodo raiz) {
        String cuerpo = "";
        for (Nodo hijos : raiz.getHijos()) {
            cuerpo += "\"" + raiz.getIdNod() + "." + raiz.getEtiqueta() + "=" + raiz.getValor() + "\"->\"" + hijos.getIdNod() + "." + hijos.getEtiqueta() + "=" + hijos.getValor() + "\"";
            cuerpo += recorrido(hijos);
        }
        return cuerpo;
    }

    //TRADUCIR A GRAPHVIZ
    public void graficar(Nodo raiz) {
        FileWriter archivo = null;
        PrintWriter pw = null;
        String cadena = recorrido(raiz);
        try {
            archivo = new FileWriter("src/Salida/arbol.dot");
            pw = new PrintWriter(archivo);
            pw.println("digraph G {node[shape=octagon, style=filled, color=blanchedalmond]; edge[color=chocolate3];rankdir=UD \n");
            pw.println(cadena);
            pw.println("\n}");
            archivo.close();
            System.out.println("Arbol Generado con exito");
        } catch (IOException e) {
            System.out.println(e + " 1");
        }
        try {
            String dotPath = "c:\\Program Files (x86)\\Graphviz2.38\\bin\\dot.exe"; //RUTA DE GRAPHVIZ
            String cmd = dotPath + " -Tpng src/Salida/arbol.dot -o src/Salida/arbol.png";
            Runtime.getRuntime().exec(cmd);
        } catch (IOException ioe) {
            System.out.println(ioe + " 2");
        }
    }

    private void analizarLexico() throws IOException {
        int cont = 1;
        DefaultTableModel modelo = (DefaultTableModel) TableSimbolos1.getModel();
        Object[] lexico = new Object[2];

        String expr = (String) txtInput.getText();
        Lexico lexer = new Lexico(new StringReader(expr));
        String resultado = "SENTENCIA" + "\t\tSIMBOLO\n";
        while (true) {
            lexico.Tokens token = lexer.yylex();
            if (token == null) {
                lexico[0] = resultado;
                return;
            }
            switch (token) {
                case IDENTIFICADOR:
                    lexico[0] = "<Identificador>";
                    lexico[1] = lexer.lexeme;
                    resultado += "<Identificador>\t" + lexer.lexeme + "\n";
                    break;
                case Comillas:
                    lexico[0] = "<Comillas>";
                    lexico[1] = lexer.lexeme;
                    resultado += "<Comillas>\t\t" + lexer.lexeme + "\n";
                    break;
                /*case Linea:
                    lexico[0] = "<Linea>";
                    lexico[1] = lexer.lexeme;
                    resultado += "<Linea>\t\t" + lexer.lexeme + "\n";
                    break;*/
                case P_RESERVADA:
                    lexico[0] = "<Palabra Reservada>";
                    lexico[1] = lexer.lexeme;
                    resultado += "<Palabra Reservada>\t" + lexer.lexeme + "\n";
                    break;
                case Void:
                    lexico[0] = "<Palabra Reservada>";
                    lexico[1] = lexer.lexeme;
                    resultado += "<Palabra Reservada>\t" + lexer.lexeme + "\n";
                    break;
                case Main:
                    lexico[0] = "<Palabra Reservada>";
                    lexico[1] = lexer.lexeme;
                    resultado += "<Palabra Reservada>\t" + lexer.lexeme + "\n";
                    break;
                case Op_ACCESO:
                    lexico[0] = "<Operador Acceso>";
                    lexico[1] = lexer.lexeme;
                    resultado += "<Operador Acceso>\t" + lexer.lexeme + "\n";
                    break;
                case Suma:
                    lexico[0] = "<Operador suma>";
                    lexico[1] = lexer.lexeme;
                    resultado += "<Operador suma>\t" + lexer.lexeme + "\n";
                    break;
                case Resta:
                    lexico[0] = "<Operador resta>";
                    lexico[1] = lexer.lexeme;
                    resultado += "  <Operador resta>\t" + lexer.lexeme + "\n";
                    break;
                case Multiplicacion:
                    lexico[0] = "<Operador multiplicacion>";
                    lexico[1] = lexer.lexeme;
                    resultado += "<Operador multiplicacion>\t" + lexer.lexeme + "\n";
                    break;
                case Division:
                    lexico[0] = "<Operador division>";
                    lexico[1] = lexer.lexeme;
                    resultado += "<Operador division>\t" + lexer.lexeme + "\n";
                    break;
                case ASIGNACION:
                    lexico[0] = "<Operador igual>";
                    lexico[1] = lexer.lexeme;
                    resultado += "<Operador igual>\t" + lexer.lexeme + "\n";
                    break;
                case Op_incremento:
                    lexico[0] = "<Operador incremento>";
                    lexico[1] = lexer.lexeme;
                    resultado += "<Operador incremento>\t" + lexer.lexeme + "\n";
                    break;
                case Op_disminucion:
                    lexico[0] = "<Operador disminucion>";
                    lexico[1] = lexer.lexeme;
                    resultado += "<Operador disminucion>\t" + lexer.lexeme + "\n";
                    break;
                case Op_atribucion:
                    lexico[0] = "<Operador atribucion>";
                    lexico[1] = lexer.lexeme;
                    resultado += "<Operador atribucion>\t" + lexer.lexeme + "\n";
                    break;
                case If:
                    lexico[0] = "<Reservada if>";
                    lexico[1] = lexer.lexeme;
                    resultado += "<Reservada if>\t" + lexer.lexeme + "\n";
                    break;
                case Else:
                    lexico[0] = "<Reservada else>";
                    lexico[1] = lexer.lexeme;
                    resultado += "<Reservada else>\t" + lexer.lexeme + "\n";
                    break;
                case Do:
                    lexico[0] = "<Reservada do>";
                    lexico[1] = lexer.lexeme;
                    resultado += "<Reservada do>\t" + lexer.lexeme + "\n";
                    break;
                case While:
                    lexico[0] = "<Reservada while>";
                    lexico[1] = lexer.lexeme;
                    resultado += "<Reservada while>\t" + lexer.lexeme + "\n";
                    break;
                case For:
                    lexico[0] = "<Reservada For>";
                    lexico[1] = lexer.lexeme;
                    resultado += "<Reservada For>\t" + lexer.lexeme + "\n";
                    break;
                case PUNTO:
                    lexico[0] = "<Punto>";
                    lexico[1] = lexer.lexeme;
                    resultado += "<Punto>\t" + lexer.lexeme + "\n";
                    break;
                case Op_DOS_PUNTOS:
                    lexico[0] = "<Dos Punto>";
                    lexico[1] = lexer.lexeme;
                    resultado += "<Dos puntos>\t" + lexer.lexeme + "\n";
                    break;
                case P_TERMINADOR:
                    lexico[0] = "<Punto y coma>";
                    lexico[1] = lexer.lexeme;
                    resultado += "<Punto y coma>\t" + lexer.lexeme + "\n";
                    break;
                case COMA:
                    lexico[0] = "<Coma>";
                    lexico[1] = lexer.lexeme;
                    resultado += "<Coma>\t" + lexer.lexeme + "\n";
                    break;
                case T_dato:
                    lexico[0] = "<Tipo de dato>";
                    lexico[1] = lexer.lexeme;
                    resultado += "<Tipo de dato>\t" + lexer.lexeme + "\n";
                    break;
                case Numero:
                    lexico[0] = "<Identificador Numero>";
                    lexico[1] = lexer.lexeme;
                    resultado += "<Identificador Numero>\t" + lexer.lexeme + "\n";
                    break;
                case Cadena:
                    lexico[0] = "<Identificador Cadena>";
                    lexico[1] = lexer.lexeme;
                    resultado += "<Identificador Cadena\t" + lexer.lexeme + "\n";
                    break;
                case Op_logico:
                    lexico[0] = "<Operador logico>";
                    lexico[1] = lexer.lexeme;
                    resultado += "<Operador logico>\t" + lexer.lexeme + "\n";
                    break;
                case Op_booleano:
                    lexico[0] = "<Operador booleano>";
                    lexico[1] = lexer.lexeme;
                    resultado += "<Operador booleano>\t" + lexer.lexeme + "\n";
                    break;
                case Op_relacional:
                    lexico[0] = "<Operador relacional>";
                    lexico[1] = lexer.lexeme;
                    resultado += "<Operador relacional>\t" + lexer.lexeme + "\n";
                    break;
                case Parentesis_a:
                    lexico[0] = "<Parentesis de apertura>";
                    lexico[1] = lexer.lexeme;
                    resultado += "<Parentesis de apertura>\t" + lexer.lexeme + "\n";
                    break;
                case Parentesis_c:
                    lexico[0] = "<Parentesis de cierre>";
                    lexico[1] = lexer.lexeme;
                    resultado += "<Parentesis de cierre>\t" + lexer.lexeme + "\n";
                    break;
                case Llave_a:
                    lexico[0] = "<Llave de apertura>";
                    lexico[1] = lexer.lexeme;
                    resultado += "<Llave de apertura>\t" + lexer.lexeme + "\n";
                    break;
                case Llave_c:
                    lexico[0] = "<Llave de cierre>";
                    lexico[1] = lexer.lexeme;
                    resultado += "<Llave de cierre>\t" + lexer.lexeme + "\n";
                    break;
                case Corchete_a:
                    lexico[0] = "<Corchete de cierre>";
                    lexico[1] = lexer.lexeme;
                    resultado += "<Corchete de apertura>\t" + lexer.lexeme + "\n";
                    break;
                case Corchete_c:
                    lexico[0] = "<Corchete de cierre>";
                    lexico[1] = lexer.lexeme;
                    resultado += "<Corchete de cierre>\t" + lexer.lexeme + "\n";
                    break;
                case ERROR:
                    lexico[0] = "<Simbolo no definido>";
                    lexico[1] = null;
                    resultado += "<Simbolo no definido>\n";
                    break;
                default:
                    resultado += "< " + lexer.lexeme + " >\n";
                    break;
            }
            modelo.addRow(lexico);
            TableSimbolos1.setModel(modelo);
        }
    }

    private void BtnIfActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnIfActionPerformed
        If = "if(num<1){\n" + "	imprimir(\"Hola Melvin\");\n" + "}\n" + "else{\n" + "	imprimir(\"Adios Melvin\");\n" + "}";
        txtInput.setText(If);
    }//GEN-LAST:event_BtnIfActionPerformed

    private void BtnWhileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnWhileActionPerformed
        While = "while (a>1){\n imprimir(\"Ciclo While\");\n} ";
        txtInput.setText(While);
    }//GEN-LAST:event_BtnWhileActionPerformed

    private void BtnMostrarArbolActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnMostrarArbolActionPerformed
        //GENERAR ARBOL A PARTIR DE LOS NODOS
        try {
            Nodo raiz = parser.padre; //VARIABLE raiz DEL TIPO NODO PADRE QUE SE ENCUENTRA EN EL PARSER
            String resultado = recorrido(raiz);
            System.out.println("Resultados: " + resultado);
            graficar(raiz); //LLAMAR AL TRADUCTOR DE GRAPHVIZ
        } catch (Exception e) {
            System.out.println("NO SE HA PODIDO GENERAR EL ARBOL " + e);
        }
        //LA IMAGEN ES LLAMADA CON EL VISOR POR DEFECTO DEL SISTEMA
        try {
            Desktop.getDesktop().open(new File("src/Salida/arbol.png"));
        } catch (IOException e) {
            JOptionPane.showMessageDialog(null, "Error al intentar abrir la imagen " + e);
        }
    }//GEN-LAST:event_BtnMostrarArbolActionPerformed

    private void BtnLimpiarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnLimpiarActionPerformed
        // TODO add your handling code here:
        txtInput.setText("");
        TxtErrorSint.setText("");
        /*Limpiar tabla*/
        DefaultTableModel lexico = (DefaultTableModel) TableSimbolos1.getModel();
        lexico.setRowCount(0);
        DefaultTableModel sintactico = (DefaultTableModel) TableSimbolos.getModel();
        sintactico.setRowCount(0);
        /*Vaciar Listas*/
        parser.PalabraReservada.clear();
        parser.Simbolo.clear();
        parser.Cadenas.clear();        
        parser.Variables.clear();        
        parser.ValoresNumericos.clear();        
        parser.Errores.clear();        
    }//GEN-LAST:event_BtnLimpiarActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GUI_Semantico.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GUI_Semantico.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GUI_Semantico.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GUI_Semantico.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GUI_Semantico().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BtnAnalziar;
    private javax.swing.JButton BtnIf;
    private javax.swing.JButton BtnLimpiar;
    private javax.swing.JButton BtnMostrarArbol;
    private javax.swing.JButton BtnWhile;
    private javax.swing.JTable TableSimbolos;
    private javax.swing.JTable TableSimbolos1;
    private javax.swing.JTextArea TxtErrorSint;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JTextArea txtInput;
    // End of variables declaration//GEN-END:variables

}
