package semantico;

import java.awt.Color;
import java.awt.Desktop;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.io.StringReader;
import java.util.HashSet;
import java_cup.runtime.Scanner;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author root
 */
public class GUI_Semantico extends javax.swing.JFrame {

    DefaultTableModel tlexico;
    DefaultTableModel tsintactico;

    int conta = 0;
    String[][] ts = new String[100][7];

    HashSet<String> palabras_r;
    HashSet<String> identificador;
    HashSet<String> cadenas;
    HashSet<String> numerico;
    HashSet<String> simbolo;

    public GUI_Semantico() {
        initComponents();
        setLocationRelativeTo(null);

        tlexico = new DefaultTableModel();
        tlexico.addColumn("TOKEN");
        tlexico.addColumn("SIMBOLO");
        this.TableLexico.setModel(tlexico);
        /*Tabla sintactico*/
        tsintactico = new DefaultTableModel();
        tsintactico.addColumn("TOKEN");
        tsintactico.addColumn("PRESERVADA");
        tsintactico.addColumn("ID");
        tsintactico.addColumn("CADENA");
        tsintactico.addColumn("NUMERICO");
        tsintactico.addColumn("SIMBOLO");
        tsintactico.addColumn("TIPO");
        this.TableSimbolos.setModel(tsintactico);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtInput = new javax.swing.JTextArea();
        jLabel2 = new javax.swing.JLabel();
        BtnAnalziar = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        TableSimbolos = new javax.swing.JTable();
        BtnMostrarArbol = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        TxtErrorSint = new javax.swing.JTextArea();
        BtnLimpiar = new javax.swing.JButton();
        jScrollPane5 = new javax.swing.JScrollPane();
        TableLexico = new javax.swing.JTable();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel1.setText("Sentencias");

        txtInput.setColumns(20);
        txtInput.setRows(5);
        txtInput.setText("public void main(String[] args){\n     String s=\"ejemplo\";\n     for(Int i=0;  i <= 0;  i++){\n            if(true != false){\n               Int sum += 0;\n            }\n     }\n}");
        jScrollPane1.setViewportView(txtInput);

        jLabel2.setFont(new java.awt.Font("Comic Sans MS", 0, 24)); // NOI18N
        jLabel2.setText("COMPILADOR");

        BtnAnalziar.setBackground(new java.awt.Color(0, 51, 255));
        BtnAnalziar.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        BtnAnalziar.setForeground(new java.awt.Color(255, 255, 255));
        BtnAnalziar.setText("Analizar");
        BtnAnalziar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnAnalziarActionPerformed(evt);
            }
        });

        TableSimbolos.setFont(new java.awt.Font("Comic Sans MS", 0, 11)); // NOI18N
        jScrollPane3.setViewportView(TableSimbolos);

        BtnMostrarArbol.setBackground(new java.awt.Color(0, 51, 255));
        BtnMostrarArbol.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        BtnMostrarArbol.setForeground(new java.awt.Color(255, 255, 255));
        BtnMostrarArbol.setText("Generar Arbol");
        BtnMostrarArbol.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnMostrarArbolActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel3.setText("Errores");

        TxtErrorSint.setColumns(20);
        TxtErrorSint.setRows(5);
        jScrollPane2.setViewportView(TxtErrorSint);

        BtnLimpiar.setBackground(new java.awt.Color(255, 0, 0));
        BtnLimpiar.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        BtnLimpiar.setForeground(new java.awt.Color(255, 255, 255));
        BtnLimpiar.setText("Limpiar");
        BtnLimpiar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnLimpiarActionPerformed(evt);
            }
        });

        TableLexico.setFont(new java.awt.Font("Comic Sans MS", 0, 11)); // NOI18N
        jScrollPane5.setViewportView(TableLexico);

        jLabel5.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel5.setText("Analisis Sintactico - Tabla Simbolos");

        jLabel6.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel6.setText("Analisis Lexico");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel1)
                                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 436, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel2))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 15, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(BtnAnalziar, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(BtnLimpiar, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(BtnMostrarArbol))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 521, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jLabel6))
                                        .addGap(0, 0, Short.MAX_VALUE)))))
                        .addGap(30, 30, 30))))
            .addGroup(layout.createSequentialGroup()
                .addGap(327, 327, 327)
                .addComponent(jLabel5)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(BtnAnalziar, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(BtnMostrarArbol, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(BtnLimpiar, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(13, 13, 13)
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel6)))
                .addGap(15, 15, 15)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(15, 15, 15)
                .addComponent(jLabel5)
                .addGap(15, 15, 15)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 187, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(30, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents


    private void BtnAnalziarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnAnalziarActionPerformed
        String ST = txtInput.getText();
        try {
            new parser((Scanner) new Lexer(new BufferedReader(new StringReader(ST)))).parse();
            analizarLexico();
            mostrarListas();
            TxtErrorSint.setText("Analisis realizado correctamente");
            TxtErrorSint.setForeground(new Color(25, 111, 61));
        } catch (Exception ex) {
            System.out.println("RESULTADO: NO SE HA PODIDO COMPILAR");
            System.out.println(Lexer.ErroresLexicos);
            System.out.println(parser.Errores);
            //TxtErrorSint.setText("RESULTADO: NO SE HA PODIDO COMPILAR");
            //TxtErrorSint.setText("" + Lexer.ErroresLexicos);
            TxtErrorSint.append("" + Lexer.ErroresLexicos);
            TxtErrorSint.append("" + parser.Errores);
            // TxtErrorSint.setText("" + parser.Errores);
            TxtErrorSint.setForeground(Color.red);
        }
    }//GEN-LAST:event_BtnAnalziarActionPerformed

    public void mostrarListas() {
        /*PALABRAS RESERVADAS*/
        palabras_r = new HashSet<>(parser.PalabraReservada);
        parser.PalabraReservada.clear();
        parser.PalabraReservada.addAll(palabras_r);
        for (String cadena : parser.PalabraReservada) {
            System.out.println(conta + " Palabra Reservada: " + cadena);
            ts[conta][0] = conta + ". " + cadena;
            ts[conta][1] = "x";
            ts[conta][2] = "";
            ts[conta][3] = "";
            ts[conta][4] = "";
            ts[conta][5] = "";
            ts[conta][6] = "";
            conta++;
        }
        /*VALORES VARIABLES*/
        identificador = new HashSet<>(parser.Variables);
        parser.Variables.clear();
        parser.Variables.addAll(identificador);
        for (String cadena : parser.Variables) {
            System.out.println(conta + " Identificador: " + cadena);
            ts[conta][0] = conta + ". " + cadena;
            ts[conta][2] = "x";
            ts[conta][6] = "";
            ts[conta][1] = "";
            ts[conta][3] = "";
            ts[conta][4] = "";
            ts[conta][5] = "";
            ts[conta][6] = "";
            conta++;
        }
        /*CADENAS*/
        cadenas = new HashSet<>(parser.Cadenas);
        parser.Cadenas.clear();
        parser.Cadenas.addAll(cadenas);
        for (String cadena : parser.Cadenas) {
            System.out.println(conta + " Cadena: " + cadena);
            ts[conta][0] = conta + ". " + cadena;
            ts[conta][3] = "x";
            ts[conta][6] = "String";
            ts[conta][2] = "";
            ts[conta][1] = "";
            ts[conta][4] = "";
            ts[conta][5] = "";
            conta++;
        }
        /*VALORES NUMÉRICOS*/
        numerico = new HashSet<>(parser.ValoresNumericos);
        parser.ValoresNumericos.clear();
        parser.ValoresNumericos.addAll(numerico);
        for (String cadena : parser.ValoresNumericos) {
            System.out.println(conta + " Valores numéricos: " + cadena);
            ts[conta][0] = conta + ". " + cadena;
            ts[conta][4] = "x";
            ts[conta][6] = "Numerico";
            ts[conta][2] = "";
            ts[conta][3] = "";
            ts[conta][1] = "";
            ts[conta][5] = "";
            conta++;
        }
        /*SIMBOLOS*/
        simbolo = new HashSet<>(parser.Simbolo);
        parser.Simbolo.clear();
        parser.Simbolo.addAll(simbolo);
        for (String cadena : parser.Simbolo) {
            System.out.println(conta + " Simbolo: " + cadena);
            ts[conta][0] = conta + ". " + cadena;
            ts[conta][5] = "x";
            ts[conta][2] = "";
            ts[conta][3] = "";
            ts[conta][4] = "";
            ts[conta][1] = "";
            ts[conta][6] = "";
            conta++;
        }
        // TOKEN - PR - IDENTIFICADOR - CADENA - NUMERO - SIMBOLO - TIPO
        for (int i = 0; i < conta - 1; i++) {
            System.out.println("Token: " + ts[i][0] + " PR: " + ts[i][1] + " ID: " + ts[i][2] + " CADENA: " + ts[i][3] + " NUMERO: " + ts[i][4] + " SIMBOLO: " + ts[i][5] + " TIPO: " + ts[i][6]);
        }
        cargarTabla();
    }

    public void cargarTabla() {
        Object[] simbolos = new Object[7];
        for (int i = 0; i < conta; i++) {
            System.out.println(ts[i][0]);
            simbolos[0] = ts[i][0]; //token
            simbolos[1] = ts[i][1]; //palabra reservada
            simbolos[2] = ts[i][2]; //identificador
            simbolos[3] = ts[i][3]; //cadena
            simbolos[4] = ts[i][4]; //numero
            simbolos[5] = ts[i][5]; //simbolo
            simbolos[6] = ts[i][6]; //tipo
            tsintactico.addRow(simbolos);
        }
    }

    //RECORRER ARBOL
    public static String recorrido(Nodo raiz) {
        String cuerpo = "";
        for (Nodo hijos : raiz.getHijos()) {
            cuerpo += "\"" + raiz.getIdNod() + "." + raiz.getEtiqueta() + "=" + raiz.getValor() + "\"->\"" + hijos.getIdNod() + "." + hijos.getEtiqueta() + "=" + hijos.getValor() + "\"";
            cuerpo += recorrido(hijos);
            System.out.println("Arbol: " + cuerpo);
        }
        return cuerpo;
    }

    //TRADUCIR A GRAPHVIZ
    public void graficar(Nodo raiz) {
        String cadena = recorrido(raiz);
        try {
            FileWriter archivo = new FileWriter("src/semantico/arbol.dot");
            PrintWriter pw = new PrintWriter(archivo);
            pw.println("digraph G {node[shape=ellipse, style=filled, color=salmon]; edge[color=black];rankdir=UD \n");
            pw.println(cadena);
            pw.println("\n}");
            System.out.println("Arbol Generado con exito");
        } catch (IOException e) {
            System.out.println(e + " 1");
        }
        try {
            String dotPath = "/usr/bin/dot"; //RUTA DE GRAPHVIZ
            String cmd = dotPath + " -Tpng src/semantico/arbol.dot -o src/semantico/arbol.png";
            Runtime.getRuntime().exec(cmd);
        } catch (IOException ioe) {
            System.out.println(ioe + " 2");
        }
    }

    private void analizarLexico() throws IOException {
        String expr = (String) txtInput.getText();
        Object[] lexico = new Object[2];
        Lexico lexer = new Lexico(new StringReader(expr));
        while (true) {
            lexico.Tokens token = lexer.yylex();
            if (token == null) {
                lexico[0] = null;
                lexico[1] = null;
                return;
            }
            switch (token) {
                case IDENTIFICADOR:
                    lexico[0] = "<Identificador>";
                    lexico[1] = lexer.lexeme;
                    break;
                case Comillas:
                    lexico[0] = "<Comillas>";
                    lexico[1] = lexer.lexeme;
                    break;
                case Linea:
                    lexico[0] = "<Linea>";
                    lexico[1] = "\n";
                    break;
                case P_RESERVADA:
                    lexico[0] = "<Palabra Reservada>";
                    lexico[1] = lexer.lexeme;
                    break;
                case Void:
                    lexico[0] = "<Palabra Reservada>";
                    lexico[1] = lexer.lexeme;
                    break;
                case Main:
                    lexico[0] = "<Palabra Reservada>";
                    lexico[1] = lexer.lexeme;
                    break;
                case Op_ACCESO:
                    lexico[0] = "<Operador Acceso>";
                    lexico[1] = lexer.lexeme;
                    break;
                case Suma:
                    lexico[0] = "<Operador suma>";
                    lexico[1] = lexer.lexeme;
                    break;
                case Resta:
                    lexico[0] = "<Operador resta>";
                    lexico[1] = lexer.lexeme;
                    break;
                case Multiplicacion:
                    lexico[0] = "<Operador multiplicacion>";
                    lexico[1] = lexer.lexeme;
                    break;
                case Division:
                    lexico[0] = "<Operador division>";
                    lexico[1] = lexer.lexeme;
                    break;
                case ASIGNACION:
                    lexico[0] = "<Operador igual>";
                    lexico[1] = lexer.lexeme;
                    break;
                case Op_incremento:
                    lexico[0] = "<Operador incremento>";
                    lexico[1] = lexer.lexeme;
                    break;
                case Op_disminucion:
                    lexico[0] = "<Operador disminucion>";
                    lexico[1] = lexer.lexeme;
                    break;
                case Op_atribucion:
                    lexico[0] = "<Operador atribucion>";
                    lexico[1] = lexer.lexeme;
                    break;
                case If:
                    lexico[0] = "<Reservada if>";
                    lexico[1] = lexer.lexeme;
                    break;
                case Else:
                    lexico[0] = "<Reservada else>";
                    lexico[1] = lexer.lexeme;
                    break;
                case Do:
                    lexico[0] = "<Reservada do>";
                    lexico[1] = lexer.lexeme;
                    break;
                case While:
                    lexico[0] = "<Reservada while>";
                    lexico[1] = lexer.lexeme;
                    break;
                case For:
                    lexico[0] = "<Reservada For>";
                    lexico[1] = lexer.lexeme;
                    break;
                case PUNTO:
                    lexico[0] = "<Punto>";
                    lexico[1] = lexer.lexeme;
                    break;
                case Op_DOS_PUNTOS:
                    lexico[0] = "<Dos Punto>";
                    lexico[1] = lexer.lexeme;
                    break;
                case P_TERMINADOR:
                    lexico[0] = "<Punto y coma>";
                    lexico[1] = lexer.lexeme;
                    break;
                case COMA:
                    lexico[0] = "<Coma>";
                    lexico[1] = lexer.lexeme;
                    break;
                case T_dato:
                    lexico[0] = "<Tipo de dato>";
                    lexico[1] = lexer.lexeme;
                    break;
                case Numero:
                    lexico[0] = "<Identificador Numero>";
                    lexico[1] = lexer.lexeme;
                    break;
                case Cadena:
                    lexico[0] = "<Identificador Cadena>";
                    lexico[1] = lexer.lexeme;
                    break;
                case Op_logico:
                    lexico[0] = "<Operador logico>";
                    lexico[1] = lexer.lexeme;
                    break;
                case Op_booleano:
                    lexico[0] = "<Operador booleano>";
                    lexico[1] = lexer.lexeme;
                    break;
                case Op_relacional:
                    lexico[0] = "<Operador relacional>";
                    lexico[1] = lexer.lexeme;
                    break;
                case Parentesis_a:
                    lexico[0] = "<Parentesis de apertura>";
                    lexico[1] = lexer.lexeme;
                    break;
                case Parentesis_c:
                    lexico[0] = "<Parentesis de cierre>";
                    lexico[1] = lexer.lexeme;
                    break;
                case Llave_a:
                    lexico[0] = "<Llave de apertura>";
                    lexico[1] = lexer.lexeme;
                    break;
                case Llave_c:
                    lexico[0] = "<Llave de cierre>";
                    lexico[1] = lexer.lexeme;
                    break;
                case Corchete_a:
                    lexico[0] = "<Corchete de cierre>";
                    lexico[1] = lexer.lexeme;
                    break;
                case Corchete_c:
                    lexico[0] = "<Corchete de cierre>";
                    lexico[1] = lexer.lexeme;
                    break;
                case ERROR:
                    lexico[0] = "<Simbolo no definido>";
                    lexico[1] = null;
                    break;
            }
            tlexico.addRow(lexico);
        }
    }

    private void BtnMostrarArbolActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnMostrarArbolActionPerformed
        try {
            Nodo raiz = parser.padre;
            String resultado = recorrido(raiz);
            System.out.println("Resultados: " + resultado);
            graficar(raiz);
        } catch (Exception e) {
            System.out.println("NO SE HA PODIDO GENERAR EL ARBOL " + e);
        }
    }//GEN-LAST:event_BtnMostrarArbolActionPerformed

    private void BtnLimpiarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnLimpiarActionPerformed
        txtInput.setText("");
        TxtErrorSint.setText("");
        /*Limpiar tabla*/
        DefaultTableModel lexico = (DefaultTableModel) TableLexico.getModel();
        lexico.setRowCount(0);
        DefaultTableModel sintactico = (DefaultTableModel) TableSimbolos.getModel();
        sintactico.setRowCount(0);
        /*Vaciar Listas*/
        parser.PalabraReservada.clear();
        parser.Simbolo.clear();
        parser.Cadenas.clear();
        parser.Variables.clear();
        parser.ValoresNumericos.clear();
        parser.Errores.clear();
        conta = 0;
        /*HashSet*/
        palabras_r.clear();
        identificador.clear();
        cadenas.clear();
        numerico.clear();
        simbolo.clear();
    }//GEN-LAST:event_BtnLimpiarActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GUI_Semantico.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GUI_Semantico.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GUI_Semantico.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GUI_Semantico.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GUI_Semantico().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BtnAnalziar;
    private javax.swing.JButton BtnLimpiar;
    private javax.swing.JButton BtnMostrarArbol;
    private javax.swing.JTable TableLexico;
    private javax.swing.JTable TableSimbolos;
    private javax.swing.JTextArea TxtErrorSint;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JTextArea txtInput;
    // End of variables declaration//GEN-END:variables

}
