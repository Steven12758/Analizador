package sintactico;
import java_cup.runtime.Symbol;

parser code
{:
    private Symbol s;
    
    public void syntax_error(Symbol s){
        this.s = s;
    }

    public Symbol getS(){
        return this.s;
}
:};

// Operadores
terminal OPERADOR,
        OPERADOR_INCREMENTO,
        OPERADOR_DISMINUCION,
        OPERADOR_MAYOR_OPERADOR_ASIGNACION_QUE,
        OPERADOR_MAYOR_QUE,
        OPERADOR_MAYOR_IGUAL_QUE,
        OPERADOR_MENOR_OPERADOR_ASIGNACION_QUE,
        OPERADOR_MENOR_QUE,
        OPERADOR_MENOR_IGUAL_QUE,
        CADENA,
        PALABRA,
        OPERADOR_ADICION,
        OPERADOR_SUSTRACCION,
        OPERADOR_MULTIPLICACION,
        OPERADOR_DIVISION,
        OPERADOR_PARENTESIS_ABRIR,
        OPERADOR_PARENTESIS_CERRAR,
        OPERADOR_CORCHETE_ABRIR,
        OPERADOR_CORCHETE_CERRAR,
        OPERADOR_LLAVE_ABRIR,
        OPERADOR_LLAVE_CERRAR,
        OPERADOR_ASIGNACION,
        OPERADOR_DIFERENTE_DE,
        OPERADOR_ASIGNACION_ADICION,
        OPERADOR_ASIGNACION_SUSTRACCION,
        OPERADOR_ASIGNACION_MULTIPLICACION,
        OPERADOR_ASIGNACION_DIVISION,
        OPERADOR_COMA,
        TERMINADOR,
        OPERADOR_DOS_PUNTOS,
        COMILLAS,
        TIPO_DATO,
        OPERADOR_LOGICO, 
        OPERADOR_RELACIONAL,
        MAIN,
        CLASS,
        IDENTIFICADOR,
        PALABRA_RESERVADA,
        LITERAL_STRING,
        LITERAL_NUM_ENTERO,
        LITERAL_NUM_FLOTANTE,
        FINAL, 
        STATIC, 
        READ, 
        WRITE, 
        REPEAT, 
        TRUE, 
        FALSE,
        INT, 
        LONGINT, 
        SHORTINT, 
        CHAR,
        STRING,
        BOOLEAN, 
        REAL,
        ERROR_IDENTIFICADOR,
        ERROR_OPERADOR,
        ERROR_PALABRA_RESERVADA,
        ERROR_LITERAL,
        OPERADOR_BOOLEANO;

non terminal INICIO, SENTENCIA, DECLARACION, DECLARACION_FOR, IF, IF_ELSE, ELSE, DO,
    WHILE, DO_WHILE, FOR, SENTENCIA_BOOLEANA, SENTENCIA_FOR;

start with INICIO;

INICIO ::= 
    INT MAIN OPERADOR_PARENTESIS_ABRIR OPERADOR_PARENTESIS_CERRAR OPERADOR_LLAVE_ABRIR SENTENCIA OPERADOR_LLAVE_CERRAR |
    MAIN OPERADOR_PARENTESIS_ABRIR OPERADOR_PARENTESIS_CERRAR OPERADOR_LLAVE_ABRIR SENTENCIA OPERADOR_LLAVE_CERRAR
;

SENTENCIA ::= 
    SENTENCIA DECLARACION |
    DECLARACION |
    SENTENCIA IF | 
    IF |
    SENTENCIA IF_ELSE |
    IF_ELSE |
    SENTENCIA WHILE |
    WHILE |
    SENTENCIA DO_WHILE
    DO_WHILE |
    SENTENCIA FOR |
    FOR
;

DECLARACION ::= 
    INT IDENTIFICADOR TERMINADOR | 
    INT IDENTIFICADOR OPERADOR_ASIGNACION LITERAL_NUM_FLOTANTE TERMINADOR |
    INT IDENTIFICADOR OPERADOR_ASIGNACION LITERAL_NUM_ENTERO TERMINADOR |
    INT IDENTIFICADOR OPERADOR_INCREMENTO TERMINADOR | 
    INT OPERADOR_INCREMENTO IDENTIFICADOR TERMINADOR | 
    TIPO_DATO IDENTIFICADOR TERMINADOR | 
    TIPO_DATO IDENTIFICADOR OPERADOR_ASIGNACION LITERAL_NUM_ENTERO TERMINADOR |
    TIPO_DATO IDENTIFICADOR OPERADOR_ASIGNACION LITERAL_NUM_FLOTANTE TERMINADOR |
    TIPO_DATO IDENTIFICADOR OPERADOR_INCREMENTO TERMINADOR | 
    TIPO_DATO OPERADOR_INCREMENTO IDENTIFICADOR TERMINADOR | 
    LITERAL_STRING IDENTIFICADOR OPERADOR_ASIGNACION COMILLAS COMILLAS TERMINADOR |
    LITERAL_STRING IDENTIFICADOR OPERADOR_ASIGNACION COMILLAS IDENTIFICADOR COMILLAS TERMINADOR 
;

IF ::= IF OPERADOR_PARENTESIS_ABRIR SENTENCIA_BOOLEANA OPERADOR_PARENTESIS_CERRAR OPERADOR_LLAVE_ABRIR SENTENCIA OPERADOR_LLAVE_CERRAR
;

SENTENCIA_BOOLEANA ::= 
    OPERADOR | 
    IDENTIFICADOR OPERADOR_RELACIONAL OPERADOR_BOOLEANO |
    IDENTIFICADOR OPERADOR_RELACIONAL LITERAL_NUM_ENTERO |
    IDENTIFICADOR OPERADOR_RELACIONAL IDENTIFICADOR |
    IDENTIFICADOR OPERADOR_RELACIONAL COMILLAS COMILLAS |
    IDENTIFICADOR OPERADOR_RELACIONAL COMILLAS IDENTIFICADOR COMILLAS
;

IF_ELSE ::= IF OPERADOR_PARENTESIS_ABRIR SENTENCIA_BOOLEANA OPERADOR_PARENTESIS_CERRAR OPERADOR_LLAVE_ABRIR SENTENCIA OPERADOR_LLAVE_CERRAR ELSE OPERADOR_LLAVE_ABRIR SENTENCIA OPERADOR_LLAVE_CERRAR
;

WHILE ::= WHILE OPERADOR_PARENTESIS_ABRIR SENTENCIA_BOOLEANA OPERADOR_PARENTESIS_CERRAR OPERADOR_LLAVE_ABRIR SENTENCIA OPERADOR_LLAVE_CERRAR
;

DO_WHILE ::= DO OPERADOR_LLAVE_ABRIR SENTENCIA OPERADOR_LLAVE_CERRAR WHILE OPERADOR_PARENTESIS_ABRIR SENTENCIA_BOOLEANA OPERADOR_PARENTESIS_CERRAR TERMINADOR
;

FOR ::= FOR OPERADOR_PARENTESIS_ABRIR SENTENCIA_FOR OPERADOR_PARENTESIS_CERRAR OPERADOR_LLAVE_ABRIR SENTENCIA OPERADOR_LLAVE_CERRAR
;

SENTENCIA_FOR ::=
    TIPO_DATO IDENTIFICADOR OPERADOR_ASIGNACION LITERAL_NUM_ENTERO TERMINADOR SENTENCIA_BOOLEANA TERMINADOR DECLARACION_FOR |
    IDENTIFICADOR OPERADOR_ASIGNACION LITERAL_NUM_ENTERO TERMINADOR SENTENCIA_BOOLEANA TERMINADOR DECLARACION_FOR
;

DECLARACION_FOR ::= 
    IDENTIFICADOR OPERADOR_ASIGNACION LITERAL_NUM_ENTERO |
    IDENTIFICADOR OPERADOR_INCREMENTO | 
    OPERADOR_INCREMENTO IDENTIFICADOR
;