
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package sintactico;

import java_cup.runtime.Symbol;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Syntax extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  
  public Syntax() {super();}

  /** Constructor which sets the default scanner. */
 
  public Syntax(java_cup.runtime.Scanner s) {super(s);}
  

  /** Constructor which sets the default scanner. */
  public Syntax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\052\000\002\002\004\000\002\002\011\000\002\002" +
    "\010\000\002\003\004\000\002\003\003\000\002\003\004" +
    "\000\002\003\003\000\002\003\004\000\002\003\003\000" +
    "\002\003\004\000\002\003\003\000\002\003\005\000\002" +
    "\003\004\000\002\003\003\000\002\004\005\000\002\004" +
    "\007\000\002\004\007\000\002\004\006\000\002\004\006" +
    "\000\002\004\005\000\002\004\007\000\002\004\007\000" +
    "\002\004\006\000\002\004\006\000\002\004\010\000\002" +
    "\004\011\000\002\006\011\000\002\015\003\000\002\015" +
    "\005\000\002\015\005\000\002\015\005\000\002\015\006" +
    "\000\002\015\007\000\002\007\015\000\002\012\011\000" +
    "\002\013\013\000\002\014\011\000\002\016\012\000\002" +
    "\016\011\000\002\005\005\000\002\005\004\000\002\005" +
    "\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\175\000\006\046\004\064\006\001\002\000\004\023" +
    "\173\001\002\000\004\002\172\001\002\000\004\046\007" +
    "\001\002\000\004\023\010\001\002\000\004\024\011\001" +
    "\002\000\004\027\012\001\002\000\010\043\017\052\022" +
    "\064\013\001\002\000\006\005\157\050\156\001\002\000" +
    "\014\023\127\030\ufff7\043\ufff7\052\ufff7\064\ufff7\001\002" +
    "\000\014\023\074\030\ufff4\043\ufff4\052\ufff4\064\ufff4\001" +
    "\002\000\012\030\ufffd\043\ufffd\052\ufffd\064\ufffd\001\002" +
    "\000\006\005\143\050\142\001\002\000\012\030\ufff9\043" +
    "\ufff9\052\ufff9\064\ufff9\001\002\000\014\023\062\030\ufffb" +
    "\043\ufffb\052\ufffb\064\ufffb\001\002\000\004\050\132\001" +
    "\002\000\012\030\031\043\017\052\022\064\013\001\002" +
    "\000\014\023\127\030\ufff8\043\ufff8\052\ufff8\064\ufff8\001" +
    "\002\000\014\023\074\030\ufff5\043\ufff5\052\ufff5\064\ufff5" +
    "\001\002\000\012\030\ufffe\043\ufffe\052\ufffe\064\ufffe\001" +
    "\002\000\012\030\ufffa\043\ufffa\052\ufffa\064\ufffa\001\002" +
    "\000\014\023\062\030\ufffc\043\ufffc\052\ufffc\064\ufffc\001" +
    "\002\000\004\002\000\001\002\000\004\027\035\001\002" +
    "\000\002\001\002\000\012\030\ufff6\043\ufff6\052\ufff6\064" +
    "\ufff6\001\002\000\010\043\017\052\022\064\013\001\002" +
    "\000\012\030\037\043\017\052\022\064\013\001\002\000" +
    "\002\001\002\000\004\023\041\001\002\000\006\004\044" +
    "\050\043\001\002\000\004\024\055\001\002\000\004\045" +
    "\045\001\002\000\006\024\uffe6\040\uffe6\001\002\000\012" +
    "\042\051\050\046\053\050\077\047\001\002\000\006\024" +
    "\uffe3\040\uffe3\001\002\000\006\024\uffe5\040\uffe5\001\002" +
    "\000\006\024\uffe4\040\uffe4\001\002\000\006\042\053\050" +
    "\052\001\002\000\004\042\054\001\002\000\006\024\uffe2" +
    "\040\uffe2\001\002\000\006\024\uffe1\040\uffe1\001\002\000" +
    "\006\027\057\040\056\001\002\000\012\030\uffde\043\uffde" +
    "\052\uffde\064\uffde\001\002\000\010\043\017\052\022\064" +
    "\013\001\002\000\012\030\061\043\017\052\022\064\013" +
    "\001\002\000\014\023\uffdf\030\uffdf\043\uffdf\052\uffdf\064" +
    "\uffdf\001\002\000\006\004\044\050\043\001\002\000\004" +
    "\024\064\001\002\000\004\027\065\001\002\000\010\043" +
    "\017\052\022\064\013\001\002\000\012\030\067\043\017" +
    "\052\022\064\013\001\002\000\014\023\uffe7\030\uffe7\043" +
    "\uffe7\052\uffe7\064\uffe7\001\002\000\004\027\071\001\002" +
    "\000\010\043\017\052\022\064\013\001\002\000\012\030" +
    "\073\043\017\052\022\064\013\001\002\000\012\030\uffe0" +
    "\043\uffe0\052\uffe0\064\uffe0\001\002\000\006\043\076\050" +
    "\077\001\002\000\004\024\123\001\002\000\004\050\114" +
    "\001\002\000\004\031\100\001\002\000\004\053\101\001" +
    "\002\000\004\040\102\001\002\000\006\004\044\050\043" +
    "\001\002\000\004\040\104\001\002\000\006\005\107\050" +
    "\106\001\002\000\004\024\uffdb\001\002\000\006\005\112" +
    "\031\111\001\002\000\004\050\110\001\002\000\004\024" +
    "\uffd8\001\002\000\004\053\113\001\002\000\004\024\uffd9" +
    "\001\002\000\004\024\uffda\001\002\000\004\031\115\001" +
    "\002\000\004\053\116\001\002\000\004\040\117\001\002" +
    "\000\006\004\044\050\043\001\002\000\004\040\121\001" +
    "\002\000\006\005\107\050\106\001\002\000\004\024\uffdc" +
    "\001\002\000\004\027\124\001\002\000\010\043\017\052" +
    "\022\064\013\001\002\000\012\030\126\043\017\052\022" +
    "\064\013\001\002\000\014\023\uffdd\030\uffdd\043\uffdd\052" +
    "\uffdd\064\uffdd\001\002\000\006\004\044\050\043\001\002" +
    "\000\004\024\131\001\002\000\004\027\057\001\002\000" +
    "\004\031\133\001\002\000\004\042\134\001\002\000\006" +
    "\042\136\050\135\001\002\000\004\042\140\001\002\000" +
    "\004\040\137\001\002\000\012\030\uffe9\043\uffe9\052\uffe9" +
    "\064\uffe9\001\002\000\004\040\141\001\002\000\012\030" +
    "\uffe8\043\uffe8\052\uffe8\064\uffe8\001\002\000\010\005\150" +
    "\031\146\040\147\001\002\000\004\050\144\001\002\000" +
    "\004\040\145\001\002\000\012\030\uffea\043\uffea\052\uffea" +
    "\064\uffea\001\002\000\006\053\153\054\152\001\002\000" +
    "\012\030\uffee\043\uffee\052\uffee\064\uffee\001\002\000\004" +
    "\040\151\001\002\000\012\030\uffeb\043\uffeb\052\uffeb\064" +
    "\uffeb\001\002\000\004\040\155\001\002\000\004\040\154" +
    "\001\002\000\012\030\uffed\043\uffed\052\uffed\064\uffed\001" +
    "\002\000\012\030\uffec\043\uffec\052\uffec\064\uffec\001\002" +
    "\000\010\005\164\031\162\040\163\001\002\000\004\050" +
    "\160\001\002\000\004\040\161\001\002\000\012\030\uffef" +
    "\043\uffef\052\uffef\064\uffef\001\002\000\006\053\167\054" +
    "\166\001\002\000\012\030\ufff3\043\ufff3\052\ufff3\064\ufff3" +
    "\001\002\000\004\040\165\001\002\000\012\030\ufff0\043" +
    "\ufff0\052\ufff0\064\ufff0\001\002\000\004\040\171\001\002" +
    "\000\004\040\170\001\002\000\012\030\ufff1\043\ufff1\052" +
    "\ufff1\064\ufff1\001\002\000\012\030\ufff2\043\ufff2\052\ufff2" +
    "\064\ufff2\001\002\000\004\002\001\001\002\000\004\024" +
    "\174\001\002\000\004\027\175\001\002\000\010\043\017" +
    "\052\022\064\013\001\002\000\012\030\177\043\017\052" +
    "\022\064\013\001\002\000\004\002\uffff\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\175\000\004\002\004\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\003\022\004\015\006" +
    "\020\007\017\012\013\014\014\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\004\025\006\027\007\026\011\031\012" +
    "\023\013\032\014\024\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\011\031" +
    "\013\033\001\001\000\002\001\001\000\016\003\035\004" +
    "\015\006\020\007\017\012\013\014\014\001\001\000\020" +
    "\004\025\006\027\007\026\011\031\012\023\013\032\014" +
    "\024\001\001\000\004\012\037\001\001\000\002\001\001" +
    "\000\004\015\041\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\003\057\004\015\006" +
    "\020\007\017\012\013\014\014\001\001\000\020\004\025" +
    "\006\027\007\026\011\031\012\023\013\032\014\024\001" +
    "\001\000\002\001\001\000\004\015\062\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\003\065\004\015\006" +
    "\020\007\017\012\013\014\014\001\001\000\020\004\025" +
    "\006\027\007\026\011\031\012\023\013\032\014\024\001" +
    "\001\000\004\010\067\001\001\000\002\001\001\000\016" +
    "\003\071\004\015\006\020\007\017\012\013\014\014\001" +
    "\001\000\020\004\025\006\027\007\026\011\031\012\023" +
    "\013\032\014\024\001\001\000\002\001\001\000\004\016" +
    "\074\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\015" +
    "\102\001\001\000\002\001\001\000\004\005\104\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\015\117\001\001\000\002\001\001\000\004" +
    "\005\121\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\003\124\004\015\006\020\007\017\012\013\014\014" +
    "\001\001\000\020\004\025\006\027\007\026\011\031\012" +
    "\023\013\032\014\024\001\001\000\002\001\001\000\004" +
    "\015\127\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\003\175" +
    "\004\015\006\020\007\017\012\013\014\014\001\001\000" +
    "\020\004\025\006\027\007\026\011\031\012\023\013\032" +
    "\014\024\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Syntax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Syntax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Syntax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol s;
    
    public void syntax_error(Symbol s){
        this.s = s;
    }

    public Symbol getS(){
        return this.s;
}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Syntax$actions {
  private final Syntax parser;

  /** Constructor */
  CUP$Syntax$actions(Syntax parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Syntax$do_action_part00000000(
    int                        CUP$Syntax$act_num,
    java_cup.runtime.lr_parser CUP$Syntax$parser,
    java.util.Stack            CUP$Syntax$stack,
    int                        CUP$Syntax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Syntax$result;

      /* select the action based on the action number */
      switch (CUP$Syntax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		RESULT = start_val;
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Syntax$parser.done_parsing();
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= INT MAIN OPERADOR_PARENTESIS_ABRIR OPERADOR_PARENTESIS_CERRAR OPERADOR_LLAVE_ABRIR SENTENCIA OPERADOR_LLAVE_CERRAR 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= MAIN OPERADOR_PARENTESIS_ABRIR OPERADOR_PARENTESIS_CERRAR OPERADOR_LLAVE_ABRIR SENTENCIA OPERADOR_LLAVE_CERRAR 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // SENTENCIA ::= SENTENCIA DECLARACION 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // SENTENCIA ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // SENTENCIA ::= SENTENCIA IF 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // SENTENCIA ::= IF 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // SENTENCIA ::= SENTENCIA IF_ELSE 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // SENTENCIA ::= IF_ELSE 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // SENTENCIA ::= SENTENCIA WHILE 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // SENTENCIA ::= WHILE 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // SENTENCIA ::= SENTENCIA DO_WHILE DO_WHILE 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // SENTENCIA ::= SENTENCIA FOR 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // SENTENCIA ::= FOR 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // DECLARACION ::= INT IDENTIFICADOR TERMINADOR 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // DECLARACION ::= INT IDENTIFICADOR OPERADOR_ASIGNACION LITERAL_NUM_FLOTANTE TERMINADOR 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // DECLARACION ::= INT IDENTIFICADOR OPERADOR_ASIGNACION LITERAL_NUM_ENTERO TERMINADOR 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // DECLARACION ::= INT IDENTIFICADOR OPERADOR_INCREMENTO TERMINADOR 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // DECLARACION ::= INT OPERADOR_INCREMENTO IDENTIFICADOR TERMINADOR 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // DECLARACION ::= TIPO_DATO IDENTIFICADOR TERMINADOR 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // DECLARACION ::= TIPO_DATO IDENTIFICADOR OPERADOR_ASIGNACION LITERAL_NUM_ENTERO TERMINADOR 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // DECLARACION ::= TIPO_DATO IDENTIFICADOR OPERADOR_ASIGNACION LITERAL_NUM_FLOTANTE TERMINADOR 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // DECLARACION ::= TIPO_DATO IDENTIFICADOR OPERADOR_INCREMENTO TERMINADOR 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // DECLARACION ::= TIPO_DATO OPERADOR_INCREMENTO IDENTIFICADOR TERMINADOR 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // DECLARACION ::= LITERAL_STRING IDENTIFICADOR OPERADOR_ASIGNACION COMILLAS COMILLAS TERMINADOR 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // DECLARACION ::= LITERAL_STRING IDENTIFICADOR OPERADOR_ASIGNACION COMILLAS IDENTIFICADOR COMILLAS TERMINADOR 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // IF ::= IF OPERADOR_PARENTESIS_ABRIR SENTENCIA_BOOLEANA OPERADOR_PARENTESIS_CERRAR OPERADOR_LLAVE_ABRIR SENTENCIA OPERADOR_LLAVE_CERRAR 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("IF",4, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // SENTENCIA_BOOLEANA ::= OPERADOR 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",11, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // SENTENCIA_BOOLEANA ::= IDENTIFICADOR OPERADOR_RELACIONAL OPERADOR_BOOLEANO 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",11, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // SENTENCIA_BOOLEANA ::= IDENTIFICADOR OPERADOR_RELACIONAL LITERAL_NUM_ENTERO 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",11, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // SENTENCIA_BOOLEANA ::= IDENTIFICADOR OPERADOR_RELACIONAL IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",11, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // SENTENCIA_BOOLEANA ::= IDENTIFICADOR OPERADOR_RELACIONAL COMILLAS COMILLAS 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",11, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // SENTENCIA_BOOLEANA ::= IDENTIFICADOR OPERADOR_RELACIONAL COMILLAS IDENTIFICADOR COMILLAS 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",11, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // IF_ELSE ::= IF OPERADOR_PARENTESIS_ABRIR SENTENCIA_BOOLEANA OPERADOR_PARENTESIS_CERRAR OPERADOR_LLAVE_ABRIR SENTENCIA OPERADOR_LLAVE_CERRAR ELSE OPERADOR_LLAVE_ABRIR SENTENCIA OPERADOR_LLAVE_CERRAR 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("IF_ELSE",5, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-10)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // WHILE ::= WHILE OPERADOR_PARENTESIS_ABRIR SENTENCIA_BOOLEANA OPERADOR_PARENTESIS_CERRAR OPERADOR_LLAVE_ABRIR SENTENCIA OPERADOR_LLAVE_CERRAR 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("WHILE",8, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // DO_WHILE ::= DO OPERADOR_LLAVE_ABRIR SENTENCIA OPERADOR_LLAVE_CERRAR WHILE OPERADOR_PARENTESIS_ABRIR SENTENCIA_BOOLEANA OPERADOR_PARENTESIS_CERRAR TERMINADOR 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DO_WHILE",9, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-8)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // FOR ::= FOR OPERADOR_PARENTESIS_ABRIR SENTENCIA_FOR OPERADOR_PARENTESIS_CERRAR OPERADOR_LLAVE_ABRIR SENTENCIA OPERADOR_LLAVE_CERRAR 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("FOR",10, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // SENTENCIA_FOR ::= TIPO_DATO IDENTIFICADOR OPERADOR_ASIGNACION LITERAL_NUM_ENTERO TERMINADOR SENTENCIA_BOOLEANA TERMINADOR DECLARACION_FOR 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",12, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-7)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // SENTENCIA_FOR ::= IDENTIFICADOR OPERADOR_ASIGNACION LITERAL_NUM_ENTERO TERMINADOR SENTENCIA_BOOLEANA TERMINADOR DECLARACION_FOR 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",12, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // DECLARACION_FOR ::= IDENTIFICADOR OPERADOR_ASIGNACION LITERAL_NUM_ENTERO 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",3, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // DECLARACION_FOR ::= IDENTIFICADOR OPERADOR_INCREMENTO 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",3, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // DECLARACION_FOR ::= OPERADOR_INCREMENTO IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",3, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Syntax$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Syntax$do_action(
    int                        CUP$Syntax$act_num,
    java_cup.runtime.lr_parser CUP$Syntax$parser,
    java.util.Stack            CUP$Syntax$stack,
    int                        CUP$Syntax$top)
    throws java.lang.Exception
    {
              return CUP$Syntax$do_action_part00000000(
                               CUP$Syntax$act_num,
                               CUP$Syntax$parser,
                               CUP$Syntax$stack,
                               CUP$Syntax$top);
    }
}

}
