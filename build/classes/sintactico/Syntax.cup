package sintactico;

import java_cup.runtime.Symbol;

parser code
{:  
    
    private Symbol s;

    public void syntax_error(Symbol s){
        this.s = s;
    }
       
    public Symbol getS(){
       return this.s;
    }

:};

terminal Linea, Comillas, T_dato, Int, Cadena, If, Else, Do, While, For,
    ASIGNACION, Suma, Resta, Multiplicacion, Division, Op_logico, Op_relacional,
    Op_atribucion, Op_incremento, Op_booleano, Parentesis_a, Parentesis_c,
    Llave_a, Llave_c, Corchete_a, Corchete_c, Main, Identificador,
    Numero, PUNTO, Void, Op_disminucion, Op_DOS_PUNTOS, TERMINADOR, P_RESERVADA, Op_ACCESO, ERROR;

non terminal INICIO, SENTENCIA, DECLARACION, DECLARACION_FOR, IF, IF_ELSE,
    WHILE, DO_WHILE, FOR, SENTENCIA_BOOLEANA, SENTENCIA_FOR;

start with INICIO;

INICIO ::= 
    Op_ACCESO Void Main Parentesis_a Parentesis_c Llave_a SENTENCIA Llave_c |
    Void Main Parentesis_a Parentesis_c Llave_a SENTENCIA Llave_c
;

SENTENCIA ::= 
    SENTENCIA DECLARACION |
    DECLARACION |
    SENTENCIA IF | 
    IF |
    SENTENCIA IF_ELSE |
    IF_ELSE |
    SENTENCIA WHILE |
    WHILE |
    SENTENCIA DO_WHILE
    DO_WHILE |
    SENTENCIA FOR |
    FOR
;

DECLARACION ::= 
    Int Identificador TERMINADOR | 
    Int Identificador Op_atribucion Numero TERMINADOR |
    Int Identificador ASIGNACION Numero TERMINADOR |
    Int Identificador Op_incremento TERMINADOR | 
    Int Op_incremento Identificador TERMINADOR | 
    T_dato Identificador TERMINADOR | 
    T_dato Identificador Op_atribucion Numero TERMINADOR |
    T_dato Identificador ASIGNACION Numero TERMINADOR |
    T_dato Identificador Op_incremento TERMINADOR | 
    T_dato Op_incremento Identificador TERMINADOR | 
    Cadena Identificador Op_atribucion Comillas Comillas TERMINADOR |
    Cadena Identificador ASIGNACION Comillas Comillas TERMINADOR |
    Cadena Identificador Op_atribucion Comillas Identificador Comillas TERMINADOR |
    Cadena Identificador ASIGNACION Comillas Identificador Comillas TERMINADOR
;

IF ::= If Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Llave_a SENTENCIA Llave_c
;

SENTENCIA_BOOLEANA ::= 
    Op_booleano | 
    Identificador Op_relacional Op_booleano |
    Identificador Op_relacional Numero |
    Identificador Op_relacional Identificador |
    Identificador Op_relacional Comillas Comillas |
    Identificador Op_relacional Comillas Identificador Comillas
;

IF_ELSE ::= If Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Llave_a SENTENCIA Llave_c Else Llave_a SENTENCIA Llave_c
;

WHILE ::= While Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Llave_a SENTENCIA Llave_c
;

DO_WHILE ::= Do Llave_a SENTENCIA Llave_c While Parentesis_a SENTENCIA_BOOLEANA Parentesis_c TERMINADOR
;

FOR ::= For Parentesis_a SENTENCIA_FOR Parentesis_c Llave_a SENTENCIA Llave_c
;

SENTENCIA_FOR ::=
    T_dato Identificador ASIGNACION Numero TERMINADOR SENTENCIA_BOOLEANA TERMINADOR DECLARACION_FOR |
    Identificador ASIGNACION Numero TERMINADOR SENTENCIA_BOOLEANA TERMINADOR DECLARACION_FOR
;

DECLARACION_FOR ::= 
    Identificador Op_atribucion Numero |
    Identificador Op_incremento | 
    Op_incremento Identificador
;