package semantico; 

import java.util.LinkedList;
import java_cup.runtime.*;

parser code 
{:
    /*Arbol*/
    public static Nodo padre;
    public int contador=0;

    /*Listas*/
    public static LinkedList<String> PalabraReservada = new LinkedList<>();
    public static LinkedList<String> Simbolo = new LinkedList<>();
    public static LinkedList<String> Cadenas = new LinkedList<>();
    public static LinkedList<String> Variables = new LinkedList<>();
    public static LinkedList<String> ValoresNumericos = new LinkedList<>();
    public static LinkedList<String> Errores = new LinkedList<>();
    
    /**
     * Método al que se llama automáticamente ante algún error sintactico.
     **/ 
    public void syntax_error(Symbol s){ 
            System.err.println("Error Sintáctico en la Línea " + (s.left) +" Columna "+s.right+ ". No se esperaba este componente: " +s.value+".");
            parser.Errores.add("Error Sintáctico en la Línea " + (s.left) +" Columna "+s.right+ ". No se esperaba este componente: " +s.value+". \n");
    } 

    /**
     * Método al que se llama en el momento en que ya no es posible una recuperación de errores.
     **/ 
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
            System.err.println("Error síntactico irrecuperable en la Línea " + (s.left)+ " Columna "+s.right+". Componente " + s.value + " no reconocido."); 
            parser.Errores.add("Error Sintáctico en la Línea " + (s.left) +" Columna "+s.right+ ". No se esperaba este componente: " +s.value+". \n");
    }  
:};

/*Identificador*/
terminal String Identificador;

/*Puntuacion*/   
terminal String Comillas, Punto, DosPuntos, P_coma;  

/*Reservadas*/
terminal String Main, Void, Op_Acceso;

/*Arimeticos*/
terminal String Suma, Resta, Multiplicacion, Division, Igual;

/*Datos*/
terminal String T_Dato, entero, decimal, cadena, Bool, Cadena;

/*Condicionales*/
terminal String If, Else, Do, While, For;

/*Operadores*/
terminal String Op_Logico, Op_Relacional, Op_Atribucion, Op_Incremento, Op_Disminucion, Op_Booleano;

/*Llaves ETC*/
terminal String Llave_a, Llave_c, Corchete_a, Corchete_c, Parentesis_a, Parentesis_c;

/*Errores*/
terminal ERROR_IDENTIFICADOR, ERROR_LITERAL;

non terminal INICIO, SENTENCIAS, SENTENCIA, DECLARACION, DECLARACION_FOR, IF, IF_ELSE,
    WHILE, DO_WHILE, FOR, SENTENCIA_BOOLEANA, SENTENCIA_FOR, EXPRE_CADENA, INSTRUCCION;

precedence left Suma, Resta;
precedence left Multiplicacion, Division; 

/*Inicio*/
start with INICIO; 

INICIO::=SENTENCIAS:instr
    {:
        Nodo nd = new Nodo("INICIO");
        nd.setIdNod(parser.contador++);
        nd.AddHijos((Nodo) instr);
        parser.padre = (Nodo) nd;

        System.out.println("------------*************----------------");
        System.out.println("Compilacion exitosa!");
        System.out.println("------------*************----------------");

        RESULT = instr;
    :}
;

SENTENCIAS ::= 
        SENTENCIAS:s1 SENTENCIA:s2
    {:
        Nodo tmp = new Nodo("SENTENCIAS");
        tmp.setValor(" Lista Sentencias ");
        tmp.setIdNod(parser.contador++);
        tmp.AddHijos((Nodo) s1);
        tmp.AddHijos((Nodo) s2);

        System.out.println("NODOS RAIZ tmp: "+tmp.Etiqueta);
        System.out.println("NODOS RAIZ s2: "+ ((Nodo)s2).getHijos());
        RESULT=tmp;
    :}
        | SENTENCIA:s2
    {:
        Nodo tmp = new Nodo("SENTENCIA");
        tmp.setValor(" Sentencia ");
        tmp.setIdNod(parser.contador++);
        tmp.AddHijos((Nodo) s2);

        System.out.println("NODOS RAIZ tmp: " +tmp.Etiqueta);
        System.out.println("NODOS RAIZ s2: " + ((Nodo)s2).getHijos());

        RESULT=tmp;
    :}
; 

SENTENCIA ::= 
        Op_Acceso:apublic Void:rvoid Main:main Parentesis_a INSTRUCCION:nd1 Parentesis_c Llave_a INSTRUCCION:nd2 Llave_c
    {:
        parser.PalabraReservada.add(apublic); 
        parser.PalabraReservada.add(rvoid); 
        parser.PalabraReservada.add(main); 
        parser.Simbolo.add(" ( "); 
        parser.Simbolo.add(" ) "); 
        parser.Simbolo.add(" { ");
        parser.Simbolo.add(" } ");

        Nodo nd = new Nodo("OPERADOR ACCESO");
        nd.setValor(" operador acceso ");
       
        Nodo nv = new Nodo("Palabra Reservada");
        nv.setValor(" void ");
        nv.setIdNod(parser.contador++);

        Nodo nm = new Nodo("Palabra Reservada");
        nm.setValor(" main ");
        nm.setIdNod(parser.contador++);

        Nodo para = new Nodo("Simbolo");
        para.setValor(" ( ");
        para.setIdNod(parser.contador++);

        Nodo parc = new Nodo("Simbolo");
        parc.setValor(" ) ");
        parc.setIdNod(parser.contador++);

        Nodo sim = new Nodo("Simbolo");
        sim.setValor(" { ");
        sim.setIdNod(parser.contador++);    

        Nodo sim2 = new Nodo("Simbolo");
        sim2.setValor(" } ");
        sim2.setIdNod(parser.contador++);

        nd.AddHijos((Nodo) para);
        nd.AddHijos((Nodo) nv);
        nd.AddHijos((Nodo) nm);
        nd.AddHijos((Nodo) parc);
        nd.AddHijos((Nodo) sim);
        nd.AddHijos((Nodo) sim2);

        nd.setIdNod(parser.contador++);
        RESULT=nd;
    :}  | error
;

INSTRUCCION ::= 
    INSTRUCCION DECLARACION |
    DECLARACION |
    INSTRUCCION IF | 
    IF |
    INSTRUCCION IF_ELSE |
    IF_ELSE |
    INSTRUCCION WHILE |
    WHILE |
    INSTRUCCION DO_WHILE
    DO_WHILE |
    INSTRUCCION FOR |
    FOR |
    DECLARACION_FOR| 
    SENTENCIA_BOOLEANA
;

DECLARACION ::= 
        T_Dato:d1 Identificador:id1 P_coma 
    {:
        parser.ValoresNumericos.add(d1);
        parser.Variables.add(id1);
        parser.Simbolo.add(" ; "); 

        Nodo tmp = new Nodo("NUMERICO");
        tmp.setIdNod(parser.contador++);
        tmp.setValor(d1);
        RESULT=tmp;
    :}
    |   T_Dato:d2 Identificador:id2 Igual entero:num1 P_coma  
    {:
        parser.ValoresNumericos.add(d2);
        parser.ValoresNumericos.add(num1);
        parser.Variables.add(id2);
        parser.Simbolo.add(" = "); 
        parser.Simbolo.add(" ; "); 

        Nodo tmp = new Nodo("NUMERICO");
        tmp.setIdNod(parser.contador++);
        tmp.setValor(d2);
        RESULT=tmp;
    :}
    |   T_Dato:d3 Identificador:id3 Igual decimal:dec1 P_coma 
    {:
        parser.ValoresNumericos.add(d3);
        parser.ValoresNumericos.add(dec1);
        parser.Variables.add(id3);
        parser.Simbolo.add(" = "); 
        parser.Simbolo.add(" ; "); 
        
        Nodo tmp = new Nodo("NUMERICO");
        tmp.setIdNod(parser.contador++);
        tmp.setValor(d3);
        RESULT=tmp;
    :}/*Asignacion*/
    |   T_Dato:d4 Identificador:id4 Op_Atribucion:sig1 entero:num2 P_coma 
    {:
        parser.ValoresNumericos.add(d4);
        parser.ValoresNumericos.add(num2);
        parser.Variables.add(id4);
        parser.Simbolo.add(sig1); 
        parser.Simbolo.add(" ; ");

        Nodo tmp = new Nodo("NUMERICO");
        tmp.setIdNod(parser.contador++);
        tmp.setValor(d4);
        RESULT=tmp;
    :}
    |   Identificador:idd Op_Atribucion:sa entero:num22 P_coma 
    {:
        parser.Variables.add(idd);
        parser.Simbolo.add(sa); 
        parser.ValoresNumericos.add(num22);
        parser.Simbolo.add(" ; ");

        Nodo tmp = new Nodo("NUMERICO");
        tmp.setIdNod(parser.contador++);
        tmp.setValor(num22);
        RESULT=tmp;
    :}
    |   T_Dato:d5 Identificador:id5 Op_Atribucion:sig2 decimal:dec2 P_coma  
    {:  
        parser.ValoresNumericos.add(d5);
        parser.ValoresNumericos.add(dec2);
        parser.Variables.add(id5);
        parser.Simbolo.add(sig2); 
        parser.Simbolo.add(" ; ");

        Nodo tmp = new Nodo("NUMERICO");
        tmp.setIdNod(parser.contador++);
        tmp.setValor(d5);
        RESULT=tmp;
    :}
    |   T_Dato:d6 Identificador:id6 Op_Incremento:op1 P_coma 
    {:
        parser.ValoresNumericos.add(d6);
        parser.Variables.add(id6);
        parser.Simbolo.add(op1); 
        parser.Simbolo.add(" ; ");

        Nodo tmp = new Nodo("NUMERICO");
        tmp.setIdNod(parser.contador++);
        tmp.setValor(d6);
        RESULT=tmp;
    :}
    |   T_Dato:d7 Identificador:id7 Op_Disminucion:op2 P_coma 
    {:
        parser.ValoresNumericos.add(d7);
        parser.Variables.add(id7);
        parser.Simbolo.add(op2); 
        parser.Simbolo.add(" ; ");

        Nodo tmp = new Nodo("NUMERICO");
        tmp.setIdNod(parser.contador++);
        tmp.setValor(d7);
        RESULT=tmp;
    :}
    |   T_Dato:d8 Op_Incremento:op3 Identificador:id8 P_coma 
    {:
        parser.ValoresNumericos.add(d8);
        parser.Simbolo.add(op3); 
        parser.Variables.add(id8);
        parser.Simbolo.add(" ; ");

        Nodo tmp = new Nodo("NUMERICO");
        tmp.setIdNod(parser.contador++);
        tmp.setValor(d8);
        RESULT=tmp;
    :}
    |   T_Dato:d9 Op_Disminucion:op4 Identificador:id9 P_coma 
    {:
        parser.ValoresNumericos.add(d9);
        parser.Simbolo.add(op4); 
        parser.Variables.add(id9);
        parser.Simbolo.add(" ; ");

        Nodo tmp = new Nodo("NUMERICO");
        tmp.setIdNod(parser.contador++);
        tmp.setValor(d9);
        RESULT=tmp;
    :}/*Cadena*/
    |   Cadena:txt1 Identificador:idc1 P_coma 
    {:
        parser.PalabraReservada.add(txt1);
        parser.Cadenas.add(txt1);
        parser.Variables.add(idc1); 
        parser.Simbolo.add(" ; ");
        
        Nodo tmp = new Nodo("TEXTO");
        tmp.setIdNod(parser.contador++);
        tmp.setValor(txt1);
        RESULT=tmp;
    :}
    |   Cadena:txt2 Identificador:idc2 Igual cadena:nd1 P_coma 
    {:
        parser.PalabraReservada.add(txt2);
        parser.Cadenas.add(txt2);
        parser.Variables.add(idc2); 
        parser.Simbolo.add(" = ");
        parser.Cadenas.add(nd1);
        parser.Simbolo.add(" ; ");

        Nodo tmp = new Nodo("TEXTO");
        tmp.setIdNod(parser.contador++);
        tmp.setValor(txt2);
        RESULT=tmp;
    :}
    |   Cadena:txt3 Identificador:idc3 Op_Atribucion:opa cadena:nd2 P_coma 
    {:
        parser.PalabraReservada.add(txt3);
        parser.Cadenas.add(txt3);
        parser.Variables.add(idc3); 
        parser.Simbolo.add(opa);
        parser.Cadenas.add(nd2);
        parser.Simbolo.add(" ; ");

        Nodo tmp = new Nodo("TEXTO");
        tmp.setIdNod(parser.contador++);
        tmp.setValor(txt3);
        RESULT=tmp;
    :}
    |   Cadena:txt4 Corchete_a Corchete_c Identificador:idc4
    {:
        parser.PalabraReservada.add(txt4);
        parser.Simbolo.add(" [ ");
        parser.Simbolo.add(" ] ");
        parser.Variables.add(idc4); 

        Nodo tmp = new Nodo("TEXTO");
        tmp.setIdNod(parser.contador++);
        tmp.setValor(txt4);
        RESULT=tmp;
    :}
;

EXPRE_CADENA::=     
        cadena:texto
    {:
        parser.Cadenas.add(texto);

        Nodo tmp = new Nodo("TEXTO");
        tmp.setIdNod(parser.contador++);
        tmp.setValor(texto);
        RESULT=tmp;
    :}  
    |   Comillas cadena:texto2 Comillas
    {:  
        parser.Simbolo.add(" \" ");
        parser.Cadenas.add(texto2);
        parser.Simbolo.add(" \" ");

        Nodo tmp = new Nodo("TEXTO");
        tmp.setIdNod(parser.contador++);
        tmp.setValor(texto2);
        RESULT=tmp;
    :}
;

SENTENCIA_BOOLEANA ::= 
        Op_Booleano:opb1 
    {:
        parser.Simbolo.add(opb1);
       
        Nodo tmp = new Nodo("BOOLEAN");
        tmp.setIdNod(parser.contador++);
        tmp.setValor(opb1);
        RESULT=tmp;
    :} 
    |   Op_Booleano:opb1 Op_Relacional:opr1 Op_Booleano:opb2
    {:
        parser.Simbolo.add(opb1);
        parser.Simbolo.add(opr1);
        parser.Simbolo.add(opb2);
       
        Nodo tmp = new Nodo("BOOLEAN");
        tmp.setIdNod(parser.contador++);
        tmp.setValor(opb1);
        tmp.setValor(opb2);
        RESULT=tmp;
    :}
    |   Bool:b1 Identificador:id P_coma 
    {:
        parser.Simbolo.add(b1); 
        parser.Variables.add(id); 
        parser.Simbolo.add(" ; "); 
       
        Nodo tmp = new Nodo("BOOLEAN");
        tmp.setIdNod(parser.contador++);
        tmp.setValor(b1);
        RESULT=tmp;
    :}
    |   Bool:b2 Identificador:id2 Igual Op_Booleano:op1 P_coma 
    {:
        parser.Simbolo.add(b2); 
        parser.Variables.add(id2); 
        parser.Simbolo.add(" = "); 
        parser.Simbolo.add(op1); 
        parser.Simbolo.add(" ; "); 
       
        Nodo tmp = new Nodo("BOOLEAN");
        tmp.setIdNod(parser.contador++);
        tmp.setValor(op1);
        RESULT=tmp;
    :}
    |   Identificador:id3 Op_Relacional:opr entero:num
    {:
        parser.Variables.add(id3); 
        parser.Simbolo.add(opr); 
        parser.ValoresNumericos.add(num); 
       
        Nodo tmp = new Nodo("BOOLEAN");
        tmp.setIdNod(parser.contador++);
        tmp.setValor(opr);
        RESULT=tmp;
    :}
;

IF ::= 
        If:sim Parentesis_a SENTENCIA_BOOLEANA:logica Parentesis_c Llave_a INSTRUCCION:nd1 Llave_c
    {:
        parser.PalabraReservada.add(sim); 
        parser.Simbolo.add(" ( "); 
        parser.Simbolo.add(" ) "); 
        parser.Simbolo.add(" { "); 
        parser.Simbolo.add(" } ");

        Nodo nd = new Nodo("CONDICIONAL");
        nd.setValor(" if ");

        Nodo conIf = new Nodo("Simbolo");
        conIf.setValor(" ( ");
        conIf.setIdNod(parser.contador++);

        Nodo parc = new Nodo("Simbolo");
        parc.setValor(" ) ");
        parc.setIdNod(parser.contador++);

        Nodo lla = new Nodo("Simbolo");
        lla.setValor(" { ");
        lla.setIdNod(parser.contador++);

        Nodo llc = new Nodo("Simbolo");
        llc.setValor(" } ");
        llc.setIdNod(parser.contador++);

        nd.AddHijos((Nodo) conIf);
        nd.AddHijos((Nodo) logica);
        nd.AddHijos((Nodo) parc);
        nd.AddHijos((Nodo) lla);
        nd.AddHijos((Nodo) nd1);
        nd.AddHijos((Nodo) llc);

        nd.setIdNod(parser.contador++);
        RESULT = nd;
    :}
;

IF_ELSE ::= 
        If:sim Parentesis_a SENTENCIA_BOOLEANA:logica Parentesis_c Llave_a INSTRUCCION:nd1 Llave_c Else Llave_a INSTRUCCION:nd2 Llave_c
    {:
        parser.PalabraReservada.add(sim); 
        parser.Simbolo.add(" ( "); 
        parser.Simbolo.add(" ) "); 
        parser.Simbolo.add(" { "); 
        parser.Simbolo.add(" } ");

        Nodo nd = new Nodo("CONDICIONAL_SI_NO");
        nd.setValor(" if ");

        Nodo para = new Nodo("Simbolo");
        para.setValor(" ( ");
        para.setIdNod(parser.contador++);

        Nodo parc = new Nodo("Simbolo");
        parc.setValor(" ) ");
        parc.setIdNod(parser.contador++);

        Nodo lla = new Nodo("Simbolo");
        lla.setValor(" { ");
        lla.setIdNod(parser.contador++);

        Nodo llc = new Nodo("Simbolo");
        llc.setValor(" } ");
        llc.setIdNod(parser.contador++);

        nd.AddHijos((Nodo) para);
        nd.AddHijos((Nodo) logica);
        nd.AddHijos((Nodo) parc);
        nd.AddHijos((Nodo) lla);
        nd.AddHijos((Nodo) nd1);
        nd.AddHijos((Nodo) llc);

        Nodo ndE = new Nodo("ELSE");
        ndE.setValor(" else ");
        nd.AddHijos((Nodo) ndE);

        Nodo lla2 = new Nodo("Simbolo");
        lla2.setValor(" { ");
        lla2.setIdNod(parser.contador++);

        Nodo llc2 = new Nodo("Simbolo");
        llc2.setValor(" } ");
        llc2.setIdNod(parser.contador++);

        ndE.AddHijos((Nodo) lla2);
        ndE.AddHijos((Nodo) nd2);
        ndE.AddHijos((Nodo) llc2);

        ndE.setIdNod(parser.contador++);
        nd.setIdNod(parser.contador++);
        RESULT = nd;
    :}
;

WHILE ::= 
        While:mientras Parentesis_a SENTENCIA_BOOLEANA:logica Parentesis_c Llave_a INSTRUCCION:nd1 Llave_c
    {:
 	parser.PalabraReservada.add(mientras); 
        parser.Simbolo.add(" ( "); 
        parser.Simbolo.add(" ) "); 
        parser.Simbolo.add(" ; "); 
        parser.Simbolo.add(" { "); 
        parser.Simbolo.add(" } ");

        Nodo nd = new Nodo("CICLO");
        nd.setValor(" while ");

        Nodo para = new Nodo("Simbolo");
        para.setValor(" ( ");
        para.setIdNod(parser.contador++);

        Nodo parc = new Nodo("Simbolo");
        parc.setValor(" ) ");
        parc.setIdNod(parser.contador++);

        Nodo lla = new Nodo("Simbolo");
        lla.setValor(" { ");
        lla.setIdNod(parser.contador++);

        Nodo llc = new Nodo("Simbolo");
        llc.setValor(" } ");
        llc.setIdNod(parser.contador++);

        nd.AddHijos((Nodo) para);
        nd.AddHijos((Nodo) logica);
        nd.AddHijos((Nodo) parc);
        nd.AddHijos((Nodo) lla);
        nd.AddHijos((Nodo) nd1);
        nd.AddHijos((Nodo) llc);

        nd.setIdNod(parser.contador++);
        RESULT = nd;
    :}
;

FOR ::= 
    For:var Parentesis_a SENTENCIA_FOR:logica Parentesis_c Llave_a INSTRUCCION:nd1 Llave_c
    {:
 	parser.PalabraReservada.add(var); 
        parser.Simbolo.add(" ( "); 
        parser.Simbolo.add(" ) "); 
        parser.Simbolo.add(" ; "); 
        parser.Simbolo.add(" { "); 
        parser.Simbolo.add(" } ");

        Nodo nd = new Nodo("CICLO");
        nd.setValor(" for ");

        Nodo para = new Nodo("Simbolo");
        para.setValor(" ( ");
        para.setIdNod(parser.contador++);

        Nodo parc = new Nodo("Simbolo");
        parc.setValor(" ) ");
        parc.setIdNod(parser.contador++);

        Nodo lla = new Nodo("Simbolo");
        lla.setValor(" { ");
        lla.setIdNod(parser.contador++);

        Nodo llc = new Nodo("Simbolo");
        llc.setValor(" } ");
        llc.setIdNod(parser.contador++);

        nd.AddHijos((Nodo) para);
        nd.AddHijos((Nodo) logica);
        nd.AddHijos((Nodo) parc);
        nd.AddHijos((Nodo) lla);
        nd.AddHijos((Nodo) nd1);
        nd.AddHijos((Nodo) llc);

        nd.setIdNod(parser.contador++);
        RESULT = nd;
    :}
;
    
SENTENCIA_FOR ::=
    T_Dato Identificador Igual entero P_coma SENTENCIA_BOOLEANA P_coma DECLARACION_FOR 
;

DECLARACION_FOR ::= 
        Identificador:id1 Op_Incremento:op1
    {:
        parser.Variables.add(id1); 
        parser.Simbolo.add(op1);

        Nodo tmp = new Nodo("CICLO");
        tmp.setIdNod(parser.contador++);
        tmp.setValor(id1);
        RESULT=tmp;
    :}
;


